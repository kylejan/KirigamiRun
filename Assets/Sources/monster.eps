%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.0
%%For: (artenot) ()
%%Title: (0000.eps)
%%CreationDate: 3/10/2011 12:41 AM
%%Canvassize: 16383
%%BoundingBox: 8 -589 585 -20
%%HiResBoundingBox: 8.68164 -588.4258 584.835 -20.0737
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 300.5 -300.5 300.5 -300.5
%AI3_TileBox: 2.33984 -720.96 597.6602 120.96
%AI3_DocumentPreview: Header
%AI5_ArtSize: 600 600
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -424.3735 244.3809 0.6667 926 752 18 0 0 44 79 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-100 -600
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 20204 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD16FFA87D522727F852FD75FFA87D2727FD07F87DFD09FFA8F87D
%FD1BFFA87D5227F852FD07FFA8FD14FFA87D7D525227522752277D7DA8FD
%1BFF7D522727F8F8F827F827F827F8F8F8FD08FF52F8F8F8A8FD18FFA852
%2727F8F852FD08FF277DA8A8FD0DFFA87D2727FD0DF852A8FD16FF7D52FD
%10F852FD07FF7DFD04F8FD17FF52F8F827F852A8FD08FFA8F8F827FD0CFF
%7D27FD04F85252F827527D27FD08F87DFD12FF7D52F8F8F827F827F827F8
%27F827F827F827F827F852FD08FF7DF8F8F87DFD16FF27F82727FD0BFF7D
%F8F87DFD0AFFA827F8F8F827F87D7DFF2752527DF827F827F827F827F827
%FD0FFF7D52FD07F827F8F8F827F8F8F827F8F8F827F8F8F8FD09FF27F8F8
%27FD08FF7DFD0CFFA8F8F8F8527D7D27A8FD07FF52F852527DFD08FFA827
%F8F8F827F8F8275227F8F827F8F8F827F8F8F827F8F8F8FD0CFFA87D27F8
%F827F827F827FD07F827F827F827F827F827F827A8FD08FF7DF827F8A8FD
%06FFA8277DFD0CFF27F827F8F8F87DA8FD07FF27F852FD0AFF52F827F827
%F827FD05F827F827F827F827F827F827F8F827FD0AFF52FD0AF852527D7D
%52FD0DF8A8FD08FF7DF8F8F852FD05FF7D27F827FD0CFF27F8F8F827FD09
%FF7DF8F852FD0AFF27FD18F827A8FD08FF7DF8F827F827F827F827F8A8FD
%06FF27F8F827F827F827F827F8277DFD09FFF827F852FD06FF52F8F87DFD
%0BFF52F827F8FD0AFF7DF8F852FD0AFF52F827F827F827F827F827F827F8
%27F827F827F827F827F8F852FD09FF7DF8F8F827F8F8F827F852FD07FFA8
%FD0BF87DFD08FFA827F8F827FD05FFA85252F8F8FD0BFF7DF8F827FD0AFF
%F8F8F87DFD0AFF52F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8
%27F827A8FD08FF7D27F827F827F827F827A8FD08FF27F827F8F8F827FD04
%F87DFD09FFF827F827FD07FFA8F8F852FD0BFFF8F827FD09FF7DF8F8F87D
%FD0AFF7DF827F827F827F827F827F827F827F827F827F827F827F827F87D
%FD08FFA8FD09F8FD09FF52F8F8277D7DF8F8F852F87DFD08FFA8F8F8F827
%FD07FFA827F8F87DFD09FFA827F8F8A8FD07FFA827F8F8F8A8FD0AFF7DFD
%18F827FD09FFA827F827F827F827F852FD09FF7DF8F87DFFFF7DF8A8FF52
%7DFD08FFA8F827F852FD08FF52F8F827A8FD09FF27F8F8A8FD07FF52F827
%F827FD0BFFA8F827F827F827F827F827F827F827F827F827F827F827F8F8
%52FD0AFF27FD04F827F8F852FD09FF7DF8F87DFFFF7DF8FFFF527DFD08FF
%52F8F8F852FD08FFA8F827F827A8FD08FF27F8F852FD06FF7DFD04F827FD
%0BFFA827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F852FD0A
%FF52F827F827F827F8A8FD09FFA8F8F827FFFF52F8527D277DFD07FFA827
%F827F87DFD09FF27F827F852A8FD07FFF827F827A8FD04FF7DF8F8F827F8
%7DFD0CFF27F8F827F827F827F827F827F827F827F827F827F827F8F852FD
%0AFF52FD07F87DFD09FFA827F8F8F827FD05F87DFD07FF7DFD04F87DFD09
%FF52FD04F8277DFD05FFA8FD04F852A8A87D27FD06F8A8FD0CFF52FD17F8
%27A8FD09FFA8F827F827F827F8FD0BFF2727F827F827F827F8F852FD06FF
%A8F827F8F827FD0BFF2727F827F82752A8A8FFA852F827F827F827F8F8F8
%27F827F8F827FD0DFF7DF8F827F827F827F827F827F827F827F827F827F8
%27F8F852FD0AFFA8F8F827F8F8F827A8FD0AFF27F8F8F827F8F8F827F827
%A8FFFFFFA87DF8F8F827F87DFD0BFF7DF827FD05F827FD05F827FD07F827
%F8F8F8A8FD0DFFA8FD05F827F8F8F827F8F8F827F8F8F827F8F8F827F87D
%FD0BFF27F8F827F8F8F8FD0BFF27F8F827F827F827F827F827527D2727F8
%27F827F852FD0DFF52F827F827F827F8F8F827F827F827F827F827F827F8
%27F852FD0FFF27F8F8F827F827F827F827F827F827F827F827F827F8F852
%FD0BFF52FD05F827A8FD0AFF27FD13F827A8FD0DFFA8FD16F827A8FD0FFF
%7D525252FD13F827FD0BFF7DF8F827F827F8FD0BFF27F8F827F827F827F8
%27F827F827F827F8F8F852FD10FF7D27F827F827F827F827F827F827F827
%F827F827F827A8FD13FF52FD04F8272752527D7D7D5227F827F827F827A8
%FD0BFFA8F8F8F827F8F8A8FD0AFF52F827FD0EF827A8FD12FF7D27F8F8F8
%27F8F8F827F8F8F827FD05F827A8FD13FF27F827527DA8A8FD07FF52F8F8
%27F8F8F8FD0DFF27F827F827F8A8FD0AFF27F8F827F8272752FD05275252
%A8A8FD15FFA852F8F8F827F827F827F827F827F8F8F87DFD15FFA87DFD0C
%FF52F827F827F8F87DFFFFFFA8A8FD07FF27FD05F87DFD0AFF27F8F8F827
%A8FD05FFA8FD1CFFA827FD0AF827F852FD1FFFA8527D527DFD07F87DFF7D
%2727F87DFD06FF7DF827F827F852A8FF7DA8FFFF7DFFFFFFF827F8F827FD
%15FF52FFFFA8FD0DFF52F8275252F8F852FF7D5252FD1FFF7DF827A827F8
%F827F827F852FFFF27F82752F8A8FD05FFA8FD04F827F8275227277D2727
%7D52FD05F827A8FD14FF27527DF87DFD0CFF525252FFFF52F8A8FFA87DFF
%A8FD1FFFA8FFFF52F827FD04F827FFFF52F8A8FF52A8FD06FF27F8F827F8
%27F8F8F827FD07F827F827F8277DA87DA8FD10FF7D7D5252FD0DFFA8FF7D
%FFFF52F8A8FFA8FD21FFA87D7D7DF8F8F827F827F827FFFF52F87DFFA8FD
%07FF52FD19F8A8FD09FFA87D7DFD0652A8FD0FFFA8FFFF7DF8A8FD0DFF52
%A8FD0AFFA8A8A87D7D7DFD04FF52F85227FD07F852FF7D27F87DFD09FFA8
%F8F827F827F827F827F827F827F827F827F8F8F827F8F8F852FD06FFA8A8
%5227FD07F827F852FD12FFA8F87DFD0CFF7DF852FFFFFFA8FD04FFA87D52
%27FD04F827A8FFFFA8A8FF7DF827F827F827F827FD04F852FD0AFF7D52FD
%07F827F8F8F852F8F8F8275227F8277DA8FD05FFA827FD04F852277DF8F8
%F827F8F8F827F87DFD10FFF87DFD0CFF27A827A8FF7DF8A8FFFFFF7D7DFF
%FD07F8A8FD04FF27FD04F827FD07F87DFD0BFFA827F8525227F8527D27F8
%7DFFA8F8F852FF52F827FD06FF52F8F8F827F82752275227F827F827F827
%F8F827FD10FF277DFD0BFF52277D27277D277D52FD04FF7D5227F8F8F827
%F8F827FD04FF52F827F827F827F827F8F827A8FD0CFFA8F8F87DFFF8F827
%FFF8F852FF7DF8F87DFF7DF827A8FD04FF52FD14F8A8FD0FFF2752FD08FF
%A852FD07F827F8F8F85252A8FFFFA87D2727F8F8F827FD04FF52FD08F852
%7DFD0FFF27F87DFF27F827A827F87DFFFFF8F852FF7DF8F8FD04FFA8F827
%F827F827F827F827F827F827F827F827F827F8FD10FF7D52FD06FFA85227
%F8277D27F8FF52F8F827F827F8F8F82752FFFFFF52F8F8F827FD05FF27F8
%F827F8522752FD11FFF8F87DFFF8F8F8FF27F852FFA827F852FF7DF8F8A8
%FFFFFF52FD04F827F8F8F827F8F8F827F8F8F827F8F8F8A8FD16FFA87DF8
%F8F827F827F8272727F827F8F8F827FD05F8527D27F8F8F8A8FD06FF7D52
%F8A8FFA8F8A8FD10FF27F87DFF27F827A852F852FFFFF8F827FF7DF8F8A8
%FFFFFF7DF827F827F827F827F827F827F827F827F827F827A8FD15FFA827
%F827F827F827F827F8F8F827F827F827F827F827F827F8F8F82752FD09FF
%A8F8A8FFFF2727FD10FFF8F852FF27F8F8A852F827FFA8F8F827FFA8F8F8
%7DFFFFFF7DFD14F852FD14FF52FD1AF827A8FD0BFF2727FFFF52F87DFD0F
%FF27F852FF27F827A87DF827FFFFF827F8FFA8F8F87DFD04FF27F8F827F8
%27F827F827F827F827F827F827F827F87DFD12FF27F8F827F827F827F827
%F827F827F827F827F827F827F827F827F827F8A8FD0BFF7DF87DFF52F852
%FD0FFFF8F827FF27F8F87DA8A8A8FFA8F8F8F87DFF7D7DA8FD05FF2727F8
%F8F827F8F8F827F8F8F827F8F8F827F8F8F87DFD0EFFA852F8F8F827F8F8
%F827F8F8F827FD07F827F8F8F827F8F8F827F8F852FD0BFF27F827FF7DA8
%FD10FF522752FF52F8F852FD05FFF8F8F87DFD0AFFA8A8FF52F827F827F8
%27F827F827F827F827F8F8F8A8FD0DFF527DFF7DF8F827F827F827FD07F8
%272727F827F827F827F827F827F8A8FD0CFF7DFD14FFA8FFFFFF27F8F852
%FD04FFA8F8F8F852FD0CFFA827FD11F852FD0CFFA8F8FFFF7DFD07F82727
%52527D7DA8A87DFD0BF827A8FD25FFA87DA8A8FD05FFA8A87DFD0DFFF8F8
%F827F827F827F827F827F827F827F827F852FFFFA8FD0AFF27F827F82752
%52527D7DA8A8FD05FFA852F8F8F827F8F8F827F827F8F827FD15FFA8A8A8
%FD27FFA827F8F827F8F8F827F8F8F827F8F8F827F8F8F852F82752FD09FF
%7D27F827A8FD0DFF7D272752F8272727F827F8527D277DFFA8FD11FF5227
%F8F827A8FD27FF27F8F827F827F827F827F827F827F827F827F827277DFD
%1CFF52FFFF5252FFFFFF7D27FFFFA827F8A8FD10FF27F82727F8F827FD1C
%FFA8A8FD09FF27FD11F87DF852A8FD1BFFA82752FF5252FD04FF277DA8FF
%7D52A8FD0DFFA87D27F8F8275252F8F8FD19FF7D7D2727F8FD09FF27F8F8
%27F827F827F827F827F827F827F852FFA87DFD1DFF277DFFFFF852FFFFFF
%7DF8A8FD10FF7D27FD04F827A8A8FFA8FD0CFFA8FD09FF7D5227FD05F87D
%FD08FF27F8F8F827F8F8F827F8F8F827FD04F87DFD23FFA82752FFFFFF7D
%7DA8FD0DFFA852FD05F85227F8F8F827FD0CFFA852FD06FFA87D27F8F827
%F827F827F8A8FD08FF52F8F827F827F827F827F827F827F8277DFD32FFA8
%7DA87D7D7DA827F8F827F8F827A8FFFF7D52277DFD0DFFF87DFFFFA87D27
%FD0AF827A8FD08FFA8FD0BF827F827A8FD10FFA85252527D7DFD19FF7D52
%2727FD0CF852FD0FFF7D52FFFFFFA82727FF5227F8F8F827F827F827F827
%F82727FD0BFF52F8277DF8527DA82752FF7DF8FD10FF52FD06F827A8FD15
%FFA827F8F827F827F827F827F827F827F8F852FD10FFA827F8A8FFA8FD05
%F827F8F8F827FD07F852FD0BFFA8F8A8FF2752FFFF5227FF52F8A8FD0EFF
%27F8F8277D27F82752F852FFFFA8FFA8FFA8FD0CFF52FD05F827F8F8F827
%F8F8F827F8F8F852FD11FFA8F8F87D27F8F827F827F827FD05F827272752
%FD0DFF7DF87DFFF852FFFF2752FF7DF8A8FD0DFFA8F827F8FFFFA8F8A87D
%F8F827F827F8F8F852A8FD0AFF7DF827F827F827F827F827F827F827F827
%F827F87DFD11FF7DF8F8F85227FD06F8277D5252FFFF7DFD0EFFA8F87DFF
%2727FFFF2727FF7DF87DFD0DFF52F8F8F8527D27FD09F827A8FD0CFFFD15
%F8FD12FF27522727F827F8277DA852FD15FFA8277DFF2727FFFF5252FFA8
%F8A8FD0DFF52F827F8F8F827F827F827F827F87DA8FD0DFF7DF8F827F827
%F827F827F827F827F827F827F827F8F87DFD10FFA8FD04F8527DA8A8FD19
%FF7DFFFF52F8FD05FFA87DA8FD0DFF27F8F827F8F8F827F8F8F827F8277D
%FD0EFF27F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827FD10FFA8
%F827F827525252A87D277DA85252A8A8527DFD12FFA87DFD12FF52A8FF52
%F827F827F827F827F827F827F852A852F87DFD09FFA8F827F827F827F827
%F827F827F827F827F827F827F8F8F8FD10FF52FD12F87DFD10FFA8FD13FF
%27F8F85227FD0DF8A852F8F8F8A8FD08FF52FD17F87DFD0FFF52F827F827
%F827F8F8F82727522752527D7DA8FD24FFA827F8F8F827F827F827F827F8
%27F827F827F827F8F8277DA8FD08FF27F827F827F827F827F827F827F827
%F827F827F827F827F87DFD0FFF27FD06F8527DA8A8FD2DFFA8A82752FD05
%F827F8F8F827F8F8F827F82752A8A8FD08FFA8FD05F827F8F8F827F8F8F8
%27F8F8F827F8F8F827F8F852FD0FFF27F827F827F8F8A8FD11FFA8A87D7D
%7DA8A8FD09FFA8522727277DFD0DFFA8F827F827F827F827F827F827F827
%A8FFA8527DFD07FF7DF8F827F827F827F827F827F827F827F827F827F827
%F827F852FD0FFFFD07F827FD06FF7DFD09FF2727FD07F82752A8FD04FF7D
%FD06F827A8FD09FFA8FFA8FD0EF827F827F852A8FD06FF52FD18F852FD0E
%FFA827F827F827F827F8A8FD05FF277DFD08FF272752F8522727F827F8F8
%52FFFFFFA8F8F827F827F827F852FD08FF7D7DA87DF827F827F827F827F8
%27F827F827F852FF7DFD08FF2727F8F8F827F827F827F827F827F827F827
%F827F827F827F852FD09FFA8FD04FFA8F8F8F827FD04F827FFFFA8527DF8
%27A8FD07FFF8F8F8277DFFA8FFA8FFA8FD04FF522752FD05F827F8A8FD07
%FF52F827F8F8F827F8F8F827FD07F827FD0AFFA827F8275227F8F8F827F8
%F8F827F8F8F827F8F8F827FD04F852FD08FF52527D7D527D5227F827F827
%F827F8F85252277DA827A8FD08FF27F827F8F8F87DFD08FFF8275227F8F8
%F8527D277DFD07FF7D7DFFA827FD08F82727527DA8FD0BFFA8F8F87DFF27
%F8F827F827F827F827F8F8F827F8F8F827F8F8F8A8FD08FF7DF8527DA852
%27FD0AF827FFFFFFA8FD09FFFD04F8277DA8FD07FF7DFD04F8527D27F8F8
%F852FD08FFA8FFFFFFFD05527D7DA8A8FD0FFF52F8F8A8FFA8FD09F827F8
%27F8F8F852F8F8F8A8FD0AFFA8A8FFFFFF52F8F827F827F827F827F87DFD
%0DFF52F8F827FD0AFF7DF827F852FFFFA827F82727FD24FF7DF827FD04FF
%7DF827FF7DF827A8A8FFFF52F852FF7DF827A8FD0FFF52F827F8F8F827FD
%05F8FD0DFF27F8F8A8FD0AFF52F8F8F87DFFFFFF27F8F827FD24FF52F827
%FD05FFF87DFFFFF852FD04FF52F852FF52F8F8FD10FF27F8F827F827F827
%F827F8F852FD0CFF52F827FD0BFF52F8F8F8FD04FF52F8F827FD19FF7D7D
%52A8FD07FF52F852FD04FFA8F852FFFF2727FD04FF7DF87DFF7DF827A8FD
%0AFFA8A8FFFFA827FD0BF827A8FFFFFF27A8FD06FF27F827FD0BFF27F8F8
%27FD04FF27F8F827A8FD14FFA85227FD05F852FD06FF27F827FD05FFF852
%FFFFF827FD04FF7DF827FF7DF8F8A8FD09FFA82752FFFFFF27F8F827F827
%F827F827F827F87DA87D522727FD06FF52F87DFD0BFF52F8F852FD04FF52
%F8F827FD13FF7D52F8F8F827F827F827F8A8FD05FF52F852FD05FF2727FF
%FF27F8FD04FFA8F852FFA8F827A8FD08FF7DF8F852FFFFA827F8F8F827F8
%F8F827FD07F87DF87DFD06FF27F87DFD0BFF27F8F87D7D7D52FFF8F8F852
%FD11FF7D27FD06F827FD04F852FD05FF52F852FD05FFF827FFFF27F8A8FF
%FFFF7DF827FF7DF8F8A8FD08FFA827F827FFFFFFF827F827F827F827F827
%F827F8F827FFFFA827A8FD05FF52F8A8FD0BFF27F82727A8FFFF52F8F8F8
%52FD0FFF7D27F8F8F827F827F827F827F827F852FD05FF7DF87DFD05FF27
%F8FFFF27F8A8FFFFFFA8F827FFA8F8F87DFD09FF27F827A8FFA827FD0DF8
%7D7D272727F8A8FD04FF27F8A8FD0BFF27FD04F85227FD04F87DFD0DFFA8
%27FD10F8FD05FF52F852FD05FFF8F8A8FF27F87DFFFFFF7DF8F8FF7DF8F8
%7DFD09FF2727F8A8FFFFF827F827F827F827F827F827F827F8F827A8277D
%FD05FF5227FD0CFF27F827F827F827F827F8F87DFD0CFF7DF8F8F827F827
%F827F827F827F827F827F827FD05FFA8F852FD05FF27F8A8FF27F87DFFFF
%FFA8F827A8A8F8F87DFD0AFF27F8F8FFA8F8F827F8F8F827F8F8F827FD04
%F852FFFFA8A8FD05FF2727FD0CFFF8F8F827F8F8F827F8F8F87DFD0AFFA8
%27F8522727FF52F827F8F8F827FD07F8FD05FFA8F827FD05FFF8F87DFF27
%F852FFFFFF7DF8F8A8A8F8F87DFD0AFFA852F8F87DF827F827F827F827F8
%27F827F8F8F8FD0AFF2727FD0BFFA827F827F827F827F827F8F87DFD09FF
%A827F852FFA8F87D27F8F827F827F8F8F82727527D27A8FD05FF27F8A8FD
%04FF27F87DFF52F852FFFFFFA8F8F87DA8F8F87DFD0CFFA827FD0EF827A8
%FD0AFFF852FD0BFFA8FD0BF8A8FD09FF7DF8F8F87D27FD09F87D7D7DFFA8
%FF52A8FD05FF52F852FD04FFF8F852FF27F827FFFFFFA8F8F87DA8F8F87D
%FD0FFFA87D52522727275252527DA8A8FD0BFFA8F852FD0BFFA827F852F8
%27F827F852F827A8FD09FFA8F8F827F8F8F827F827F8F852A87DFD0DFF7D
%F8F8FD04FF27F852FF52F827FD04FFF8F852A8F8F852FD26FFA827F852FD
%0BFFA8F827A827F827F8F87D27F8FD0BFF27F8F827F8F8F827F82727FD11
%FFF8F852FFFFFFF8F827FF27F8F8FFFFFFA8F8F852A8F8F852FD25FF7D27
%F8F827FD0BFFA8F8277DF827F827F87D5227FD0CFFF8F8F827F827F827A8
%FD12FF7DF8F8FFFFFF52F852FF7D2752FD04FF7D7D7DFFA8A8A8FD22FF7D
%52FD06F87DFD0AFFA8F8F85227FD04F85227F8FD0CFF7DFD06F827FD14FF
%7D52FD05FFA8FD2DFFA87D5227F8F827F827F827F852FD0AFFA827F852A8
%52F827A852F827FD0DFF52F827F827F87DFD3AFFA87DFD07FFA8A87D5227
%27FD0DF8A8FD09FFA8F8F852FF27F8F8FF7DF8F8FD0EFF27F827F8F827FF
%A8FFA87DA8FD0BFF7D52A8FD26FF27F8277D7D7D52522727F8F8F827277D
%7DA87DA8A8A87D27F827F827A8FD09FFA827F8272727F8272727F827FD04
%FF7D7D52A8FD06FFA8F8F827F8F827527D27F87DFD0BFFA827527D7D5252
%527D7DFD1FFFA8FD09F8527DA8FD0AFF52FD04F8FD0BFFFD0BF8525252FD
%05F87DFD06FF52FD09F827FD0BFF7D52FD09F87DFD1EFFA8F827F827F827
%F8A8FD0CFFA827F827F827FD0BFF52F827F827F827F827F827F8F8F827F8
%27F8F8F8FD07FF27F8F827F827F82727FD0AFF7DF8F8F827F827F827F827
%F8F8F852FD1DFF7DF8F827FD04F82752277DFD08FFA827F827F8F852FD0B
%FF7DFD04F827FD07F827F8F8F827F8F87DFD07FFFD05F87DA8FD0AFF52F8
%F8F827F8F8F827FD07F852FD1DFF5227F827F827F827F8F8F8527DFD05FF
%7D27F827F827F8A8FD0CFF52F8F827F827F8F8F827F827F827F827F8F8F8
%FD08FFA8F827F827FD0BFFA8F827F827F827F827F827F8272727F827F8A8
%FD1DFF27FD09F827FFFFFF7D7DFD07F852FD0EFF27FD06F87DA827FD07F8
%A8FD09FF52F8F827FD0BFF52FD04F82727FD05F8A8FFFD04F82752F87DFD
%1AFFA85227F8F8F827F827F82752522727F8F8F827F827F827FD10FF2752
%27527D7DA8FFFF7D2727F82752FD0BFFA827F852FD0BFF52F827F827F827
%F827F827F8525227F827F852FF7DA8FD1DFFA85227FD09F827FD05F827A8
%FD0FFFA87DFD04FF527DA8FFFFFFA8FD0FFF52F827FD0BFF52F8F827F8F8
%F827F8F8F827F8F8F827F8F827FD23FFA85227FD09F82727A8FD11FF52F8
%7DFFFFA827F87DFD13FFA8F87DFD0CFFF8F8F827F8F8F827F827F827F827
%F827F852FD25FF52277D7DFD0552F87DFD13FF52F87DFFFFFF7D52FD10FF
%A8A8FFFF7DF852FD0CFFA827F8F827F827F827FD08F852FD25FF5252FD07
%FF277DFD14FFA8FD16FF277DFFFFA8F8A8FD0EFFA8FFA8FFFFA8F827F827
%F827F827F8A8FD24FF7DF827FD06FFA827F87DFD29FF7DF8FFFFFF7D27FD
%14FF27FD04F827F8F8F827A8FD24FF7D27F8A8FD05FFA8527DFD2AFF2752
%FFFFFF5252FD14FF52F827F827F827F827F87DFD25FF7DFFA8FD32FF2727
%FFFFFFF852FFA827F87DFD10FF27FD09F8527DA8FD57FF2727FFFF52F8F8
%272727F87DFD10FF52F8F827F827F827F827F8F8F8527DFD17FFA8A8FD08
%FF7D7DFD13FFA8A87D7D5252527DA8FD0BFF7DA8FD09FF52F85252F82727
%F852FFA8A8FD10FF52F827F8F8F827F8F8F827FD05F827F8277DFD12FF7D
%277DA8FD057DA8F8A8FD11FFA85227FD08F8277DFD09FF7DF87DFD08FF7D
%FD04F8A852F8F8A8FD12FF52F8F827F827F827F827F827F827F8F82727F8
%27A8FD12FFFD07F827F8F827FD0FFF7D27FD0DF8277DFD07FF52F8F87DFD
%08FF27F8F8277D7DF8F852FD12FFA8FD0FF8527DF8F827FD12FF27F8F87D
%52F8FF7DF8F8F87DFD0DFF52F8F827F827F827F827F827F827F827F8F827
%A8FD04FFA827F827F8FD09FF5227F827F827F87DFD13FF52F827F827F827
%F827F827F827F827A8FFF8277DFD11FF52F827F827F8275252F8F8F852FD
%0CFF27FD04F827F8F8F827F8F8F827F8F8F827F8F8F8527D7D5227FD04F8
%27FD08FFA8F87D2752F852FD15FF27F852F8F8F827F8272727F87DA8FFA8
%2727FD12FF27F8F827F827F8F8F827525252FD0BFF27F8F827F827F827F8
%27F827F827F827F827F827F827FD05F827F827F8F8A8FD07FF2727FFFFFF
%5227FD15FF2752FF5227FFA82752FF5227FD04FF7DA8A8FD10FF7DFD08F8
%7DFFFFA8FD0BFF52FD20F852FD06FFA8F827FFFFFF7DF8F87DFD12FFA8F8
%52FF2727FFFFF852FF52F8FD17FF7DF827F827F827F827A8FD0DFFA827F8
%27F827F827F827F827F827F827F827F827F827F8F87DFF52F87DFF2727F8
%2727FD06FF7DF8277DFFFFA8F827FD14FFF87DFF5227FFFF2752FF5227FD
%17FF27FD04F827F8F8F8527DA82752FD09FF7DF827F8F8F827F8F8F827F8
%F8F827F8F8F827FD05F8A8FF7DF8527D27FD04F8A8FD05FF7DF852FD04FF
%A8277DFD12FFA8277DFF2727FFFF2752FF52F8FD13FF7DA8FFFF27F827F8
%27F827F827FD04F827FFFFA87DFD05FF27F8F827F827F827F827F827F827
%F827F827F827F827F8272752F827F8F8F827F827F8A8FD06FF7D7DFD1AFF
%7DFFFF5227FFFFA8A8FF5227FD07FFA87DFD09FF7DF8527DA8FD0DF8277D
%7D27F8A8FFFFFFA827FD1BF827FD06F852FD25FF2727FD05FF5227FD05FF
%A8FF27F8A8FD09FF7D7D7D2727F827F827F827F827F827F827F852A87D7D
%FD05FFF827F827F827F827F827F827F827F827F827F827F827F827F82752
%277DFFF8525227F87DFD0EFFA8A87D7D527D527DA8FD0EFF7D52FD05FFA8
%A8FFFF7D52F827F827F8FD0DFFA8F8F8F827F8F8F827F8F8F827F827FD08
%FF7DFD04F827F8F8F827F8F8F827F8F8F827F8F8F827FD04F87DFF7DFFFF
%7DA8FF27F852FD0CFFA827FD09F8277DFD15FFA827FD07F8A8FD0CFF7D27
%F827F827F827F827F827F8F827FD08FFA8F827F827F827F827F827F827F8
%27F827F827F827F827F8F852FD09FFA8A8FD0BFF7DF85252F8F827F827F8
%27F8F8F852FD0FFF7D52FFFF7DF8F8F827F827F827F87DFD0CFFA8FD0DF8
%27FD08FFA8FD18F827A87DA8FD12FF7DF8F82752FD08F8277DF827FD0EFF
%27F85252FD0AF827FD0CFFA827F827F827F827F827F827F82727FD09FFF8
%27F827F827F827F827F827F827F827F827F827F827F827F827F8A87D7DFD
%0FFFA8F827FD0FF87DFD0EFF27F8F827F827F827F827F827F827FD08FFA8
%7DA85252F827F8F8F827F8F8F827F8F8F827527DA87DA8FD04FF27F827F8
%F8F827F8F8F827F8F8F827F8F8F827F8F8F827FD04F827F8277DA8FD0DFF
%FD04F8277D7D527DA8527D7D7D52FD047DFF7D7DA8FD0BFF27FD06F827F8
%27F8F8F8FD08FF52F8527D7DFD06F827F8F8F827F8F8F8A87D52F8A8FD04
%FF52F8F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%F827FD0DFF7DF8F827F852A8FD0BFFA8FF2727F8F8A8FD0AFF52F8F8F827
%F827F8275227F827A87D52FD05FFA852A8FFFF7D272727FD05F827F82727
%52FFFF7D7DA8FD04FFA8FD1BF8277DFD0EFF52FD07F827F827F8272727F8
%27F8F8F852FF7DF827FD0AFF52F852FF27FD08F827F8F852FD0DFFA8F827
%A8FD10FF7DF827F827F827F827F827F827F827F827F827F827F827F8F8F8
%2727FD0FFFF827F827F827F827F827F827F8F8F827F827F8F852FFA827F8
%FD0AFFA8F87DFF52F827F8272727F827F827F87DFD0DFF52F827FD12FF52
%F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8275227F8F852FD0DFF
%A8FD04F827F8F8F827F8F8F827F8F8F827F8F8F852FFFF7D52FD0AFF7DFD
%04F8277DA8A8FFFD05F852A8FD0DFF52F852FD11FFA827FD04F827F827F8
%27F827F827F827F8F8F827F852FFFF7DF8F8F8A8FD0CFFA8F827F827F827
%F827F827F827F827F827F827F8F852FD0FFFF827F852FD04FF5227F8277D
%FD10FF52F8F87DFD10FFF8F8F8277D27FD0BF8525252F8F852FFFFFF52F8
%52FD0DFF7DFD14F852FD0CFF525227FD04F87D527DFD04F827FD12FF27F8
%F852FD0FFF52F852FFFF52F8F8277D7D7DA87DA8A8FFFFFF7DF8F827FD04
%FFA8FD0BFF7D275252F827F827F827F827F827F827F827F827F827F8F827
%52F852FD08FFA827F8F8F827F827FD05F827F852FD13FF27F8F827A8FD0E
%FFA8FFFFA827F8F827FD0BFFF8F8F8A8FD0EFFA8F82752F8F8F827F8F8F8
%27F8F8F827F8F8F827F8F8F827F8F8527DF8A8FD08FF27FD04F827F8F8F8
%27FD04F852FD14FF52F8F87DFD11FFA8F8F8F8A8FD0BFF7D7DA8FD10FF27
%FFFF7DF827F827F827F827F827F827F827F827F827F827F8FFFF52FD09FF
%A8527D7D27F827F827F827F827F87DFD15FF27F827FD12FFA8527DFD1AFF
%A8FD04FF527DFF27FD15F87DA852FD0DFFFD0AF87DFD14FF5227F87DFD30
%FFA852277D2752FF5227F8F827F827F827F827F827F8F8F827F8F8F82727
%7D7DFD0427FD0AFF52F827F827F827F8F8F8FD14FF7DF8F852A8FD30FF7D
%FD04F827FF7DA87D522727F827F827F827F8FD042752527DA8FFA852F827
%F8277DFD09FFA8522727F8F8F827F852FD15FF7DA8FD64FFA8A8A8FD87FF
%FF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Fade To Edge Black)
(Fade To Edge Black) 0 3 Bd
[
0.697627
0.675227
0.638575
0.739559
0.137255
0.121569
0.12549
4 %_Br
0.697627
0.675227
0.638575
0.739559
0.137255
0.121569
0.12549
4 %_Br
[
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS
%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS
%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS
%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Neon Rings Vignette)
(Neon Rings Vignette) 1 17 Bd
[
0.707332
0.690944
0.645747
0.836149
0.07451
0.047059
0.054902
4 %_Br
<
B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7
E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4
F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECEC
ECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDB
DAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3
C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1
>
<
B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5
B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADAB
AAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999B99979697959492939290
91908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A
69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C
3B393A3837353634323331302E2F2D2C2A2B2928292726242524
>
<
A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A
8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E
6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E
4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A2927
27262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A090807070505040403
0202000000000000000000000000000000000000000000000000
>
<
D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99
979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C
4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A1917
16151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101
01010101010101000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000
>
<
13131313131312121212121212121212121211111111111111111111111110101010101010101010
10100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C
0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A09090909090909
09090909090808080808080808080808080707070707070707070707070606060606060606060606
05050505050505050505050504040404040404040404040403030303030303030303030302020202
0202020202020202010101010101010101010101000000000000
>
<
0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728
292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F4041414243434445
4646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162
626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E
7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B
9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5
D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
>
4 %_Br
<
B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6
A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A999898979696959594949392
92919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878
777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A5958575656
5554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C
>
<
2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A1717181616161414141412121311
1212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A0809090808080707080806070705060605
05050504040403040403040404030304020303030202030202020101010201010100010100010101
01010100010100000101000001000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000001000001000001000001010001
>
0.000031
0.000031
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC
>
<
AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BA
BABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6
C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1
D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDD
DEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6
>
<
EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4
F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9
F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB
>
4 %_Br
<
3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E
5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F80
8081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898
999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9
AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1
>
<
01000101000001000001000001000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000010000010100000101000101010101010001010001010102
01010102020203020203030302040303040404030404030404040505050506060507070608080707
0808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E1010101012121113121214141414161616
1817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424
>
0.000031
0.000031
<
BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A9998979695
94939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D
6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4948474645
44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D
1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDA
DADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCE
CECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3
C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7
B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE
>
<
FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9
F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1
F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF
>
4 %_Br
<
B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACB
CCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1
E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1
F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3
F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8
D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4
>
<
24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A
4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F7072717375747677
79797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999B999B9C
9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AF
B0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4
B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0
>
<
00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E
0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334
353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F5151525354555556575858
5A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F7171727374747576777779
79797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F90909292929294
9495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000010101010101010101010202020202030303030404
040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F202122242526
27292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E606264
6668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3
B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5
>
<
00000000000001010101010101010101010102020202020202020202020203030303030303030303
03030404040404040404040404040505050505050505050505050606060606060606060606070707
0707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A
0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D
0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101011111111
1111111111111111121212121212121212121212131313131313
>
<
AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A9998989796969594939392
9190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675
747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A5958
5857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C
3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F
1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E
>
4 %_Br
0.707332
0.690944
0.645747
0.836149
0.07451
0.047059
0.054902
4 %_Br
<
B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C
8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D
6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A
5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A4949474746464544434342
4140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A18
1716141312100F0E0C0B0A080706050403020000
>
<
B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5
D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2
F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFD
FDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFD
FDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7
F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1
>
<
A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596
949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E
8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384
838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A78797778767775767475737371727070
6F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B
49494646444441413F3F3D3D3A3A383836363434
>
<
D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3
B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877
757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D
3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A18181616141413121110
0F0F0E0D0C0B0A0A0909080707060605040403030202020201010101010100000000000000000000
0000000000000000000000000000000000000000
>
<
131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A
3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162
636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A
8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2
B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DA
DBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
<
0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101011111111111111
11121212121212121313131313131314141414141414141515151515151516161616161616171717
171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C
1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F2020202020202021212121212121222222
22222222222323232323232324242424242424252525252525252526262626262626272727272727
272828282828282828292929292929292A2A2A2A
>
<
0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121
222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F303031313232333334343535
36363737383839393A3A3B3B3C3C3D3D3E3E3F3F4040414142424343444445454646474748484949
4A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D
5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171
727273737474757576767777787879797A7A7B7B
>
4 %_Br
<
00000000000000000001010101010101010101010101010101020202020202020202020202020302
02020304030404040404050505050505050505060606060606060606070707070707070809090909
090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E
0E0E0E0E0E101010101011111111
>
<
F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5
D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9
A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A78777674737270
6F6E6C6B6A686765646261605E5D
>
<
343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A191718161715131413111210
0F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304
03020302020302010202010201020201010100010000000001000000000000000000000000000000
0000000000000000000000000000
>
0.000031
<
EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECEC
ECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7
E7E7E7E7E7E6E6E6E6E6E6E6E6E6
>
<
2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051
52535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F70717273747576777879
7A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1
A2A3A4A5A6A7A8A9AAABACADAEAF
>
<
7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F90919192939394
95959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADAD
AEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7
C8C8C9CACACBCCCCCDCDCECFCFD0
>
4 %_Br
<
1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B
0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505
05050505040404040403040302020203020202020202020202020202020101010101010101010101
0101010101000000000000000000
>
<
5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E90919394
9697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6
C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8
E9EAEBEBECECEDEDEEEFEFF0F1F1
>
<
00000000000000000000000000000000000000000000000000000000000100000000010001010102
02010201020201020302020302030403040303040404050405060505040506060708070809090A09
0A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F202021232325
2726282A292B2E2D2F2E30333234
>
0.000031
<
E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEEEEEEEEEEEEEEEEEE
>
<
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A
>
<
D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7
B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E
9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A898888878786858584
8383828181807F7F7E7E7D7C7C7B
>
4 %_Br
<
0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30
313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F
4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264
636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A
7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E
9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4
>
<
F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFA
FAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFE
FEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8
F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8
E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5
C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0
>
<
3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F
616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A
7C7B7D7C7D7D7E7E7F7F808081808281838284838483858486858685868687868887888788888988
8A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F9090
91909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C
9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5
>
<
00000000000000000000000000000000000000000000000000000000000001010101010102020202
0303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F20212223
25252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657
595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E90919394
96979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7
C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5
>
<
EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7
C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F
9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877
767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F
4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827
262524232221201F1E1D1C1B1A19181716151413
>
<
2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525
252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F
1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A
1A191919191919191818181818181818171717171717171616161616161615151515151515141414
141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F
0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C
>
<
7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868
676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A595958585757565655555454
53535252515150504F4F4E4E4D4D4C4C4B4B4A4A4949484847474646454544444343424241414040
3F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C
2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818
171716161515141413131212111110100F0F0E0E
>
4 %_Br
0.707332
0.690944
0.645747
0.836149
0.07451
0.047059
0.054902
4 %_Br
<
B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBF
BFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3
C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1
B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896
>
<
B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5
D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5
E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDE
DDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1
>
<
A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C
7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A59
5857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B29
2826252321201D1C1A1917151312100E0D0B0A09080605030200
>
<
D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A9896
93918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442
403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A080807
0605050403030302020201010101010101000000000000000000
>
<
1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30
313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D
4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B
6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E
>
<
0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E
1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F3030
30313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242
434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
>
4 %_Br
<
96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E
5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B
2928272625242221201F1E1D1C1B1A191817161514131211
>
<
D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A0
9E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A797776757574
7372706F6E6D6C6B6A6968676665646463636261605F5E5D
>
0.000031
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000
>
<
7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5
A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6
>
<
4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273
747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798
999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF
>
<
9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2
B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5
C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0
>
4 %_Br
<
1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D
3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173
747577787A7B7D7F808283848687898A8C8D8F9092939596
>
<
5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F80818384
8586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2
B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1
>
0.000031
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000
>
<
E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BF
BEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E
>
<
AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A
89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666665
64636261605F5E5D5C5B5A59585756565554535251504F4E
>
<
D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBD
BDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAA
AAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F
>
4 %_Br
<
9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BA
BABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3
C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBC
BCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4
>
<
D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3
E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3
E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECC
CCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0
>
<
000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B
3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465
666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F80818283848586878889
8A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5
>
<
00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F1012131415
17181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B
5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1
B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5
>
<
7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A696968676666656463636261
60605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A4948474746454444
43424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A2928282726
2525242322222120201F1E1D1D1C1B1A1A191817171615141413
>
<
4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C
3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A
2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A19191818
1717161616151514141313121211111110100F0F0E0E0D0D0C0C
>
<
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E
>
4 %_Br
0.707332
0.690944
0.645747
0.836149
0.07451
0.047059
0.054902
4 %_Br
[
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs
0.693446 0.140078 0.000031 0.000031 0 0.682353 0.937255 2 50 88.1542 %_BS
%_0.693446 0.140078 0.000031 0.000031 0 0.682353 0.937255 2 50 88.1542 Bs
0.23563 0.002045 0.000031 0.000031 0.737255 0.901961 0.984314 2 50 88.7967 %_BS
%_0.23563 0.002045 0.000031 0.000031 0.737255 0.901961 0.984314 2 50 88.7967 Bs
0.693446 0.140078 0.000031 0.000031 0 0.682353 0.937255 2 50 89.2704 %_BS
%_0.693446 0.140078 0.000031 0.000031 0 0.682353 0.937255 2 50 89.2704 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs
0.000031 0.946166 0.204593 0.000031 0.933333 0.164706 0.482353 2 50 91.2834 %_BS
%_0.000031 0.946166 0.204593 0.000031 0.933333 0.164706 0.482353 2 50 91.2834 Bs
0.066621 0.365332 0.000031 0.000031 0.901961 0.686275 0.815686 2 50 92.2176 %_BS
%_0.066621 0.365332 0.000031 0.000031 0.901961 0.686275 0.815686 2 50 92.2176 Bs
0.000031 0.946166 0.204593 0.000031 0.933333 0.164706 0.482353 2 50 92.7625 %_BS
%_0.000031 0.946166 0.204593 0.000031 0.933333 0.164706 0.482353 2 50 92.7625 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs
0.589197 0.818265 0.000031 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS
%_0.589197 0.818265 0.000031 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs
0.066621 0.365332 0.000031 0.000031 0.901961 0.686275 0.815686 2 50 95.6817 %_BS
%_0.066621 0.365332 0.000031 0.000031 0.901961 0.686275 0.815686 2 50 95.6817 Bs
0.589197 0.818265 0.000031 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS
%_0.589197 0.818265 0.000031 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs
0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS
%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Pink Radial)
(Pink Radial) 1 2 Bd
[
0.000031
<
00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C
2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758
585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E
7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D
9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6
B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6
C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECE
CECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1
>
<
0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F1010
1112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F202122212223242524252627
27282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E
403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E50515052515352535555575658
5759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F
6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F818080828281818483
8385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E90909090909091919191
9191939292929292929294949494949494949494949595959595959595959595959595
>
0.000031
1
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDA
D9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8
B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B
9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A898888878786858584848383
82828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F
6F6E6E6D6D6C6C6C6B6B6A6A6A696968686867676766666665656464646363636262626261616160
60605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A5959595959585858585858575757
5757575656565656565656555555555555555555555454545454545454545454545454
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDB
DAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBA
BAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E
9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786
868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A797978787777777676757574747473
7372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A696969686868676767666666666565
6564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C
5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959
>
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 31.3953 49.7076 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 31.3953 49.7076 Bs
0.000031 0.819882 0.584924 0.000031 1 0.329412 0.34902 2 50 100 %_BS
%_0.000031 0.819882 0.584924 0.000031 1 0.329412 0.34902 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 11)
(Unnamed gradient 11) 0 3 Bd
[
0.000031
<
A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBC
BDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB
>
<
080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A
4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B
>
0.000031
1
<
7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A
69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A
>
<
ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584
838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
>
4 %_Br
0.000031
<
8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D
8D8D8D8D8D8F8F8F8F8F8F9090909090919292929292929494949494949595959595979797979797
9999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3
A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9
>
<
F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8
C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88
868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B3937
3533302E2D2B29272422201E1C1A17151312100E0B0A08
>
0.000031
1
<
9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C
8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A8989898989898888888888888787878787868686868686
8585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F
7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B
>
<
1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445
464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D
6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495
969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC
>
4 %_Br
[
0.000031 0.796872 0.544518 0.000031 1 0.352941 0.376471 2 50 100 %_BS
%_0.000031 0.796872 0.544518 0.000031 1 0.352941 0.376471 2 50 100 Bs
0.000031 0.661738 0.032776 0.000031 1 0.482353 0.67451 2 50 61.7977 %_BS
%_0.000031 0.661738 0.032776 0.000031 1 0.482353 0.67451 2 50 61.7977 Bs
0.000031 0.508354 0.961639 0.000031 1 0.576471 0.117647 2 50 0 %_BS
%_0.000031 0.508354 0.961639 0.000031 1 0.576471 0.117647 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 139)
(Unnamed gradient 139) 1 2 Bd
[
0.000031
0.000031
0.000031
0.000031
1
1
1
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 87 36.6667 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 87 36.6667 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 100 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324
252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F5052
5354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D
7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C
9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0
B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBB
BCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B
1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041
424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768
696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F8081818283838485868687
8889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F
9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABAB
ACACACACACACACACADADADADADADADAD
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C
1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F404142
4344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768
696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F808181828384848585
8687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D
9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8
A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C
0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D
3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E8083858789
8C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4
D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
4 %_Br
[
0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Water)
(Water) 0 5 Bd
[
<
D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5
>
<
5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475
>
<
3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353
>
<
02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112
>
0
<
8A89888786858484838281807F7E7D7C7B7A7978777776757473727170
>
<
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C
>
4 %_Br
<
B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1
D2D2D3D4D4D4D5
>
<
17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F41434446474749
4A4C4D4F4F5052
>
<
15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F3030313334353536373839
3A3A3B3C3D3E3F
>
<
00000000000000000000000000000000000000000000000000000000000000000000000001010101
01010101010202
>
0
<
B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A999897969695949392919190
8F8E8D8C8C8B8A
>
<
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9
>
4 %_Br
<
7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F909091929393
9494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAA
AAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8
B8B8B9B9B9B9B9
>
<
02020202020102020201020202010202020102020101020201010202010102010101020202010302
02020303020203030303040403030404040405040404050504050505050606060507070606070707
0708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F1111111112121212141414
14151515151717
>
<
10111010121211111111101112121212121211111313121313131212141413141414131315151414
14151314151614151515141416161415151514141616141415141416161515151514141616151515
16151516171616161615151717161616171616181817171717161617171616161615151717161616
16151516171515
>
0.000031
<
7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958
57565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807
06050403020100
>
<
D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6
C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBC
BCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2
B2B1B1B1B1B0B0
>
<
E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3
E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDE
DEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9
D9D9D9D8D8D8D8
>
4 %_Br
<
000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20212223
2425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748
494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D
6E6F70707172737475
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000010000010000010100010102010102
010102010202010202
>
<
00000000000000000001010101010201020201010302020202020303030303040304040304040405
0405060506050506060606060607060706060707080807080808090808080909090909080A0A0909
0A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E
101010100F0F111010
>
0.000031
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F
>
<
FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1
F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2
E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3
D3D3D2D2D1D1D1D0D0
>
<
FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8
F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1
F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEA
E9E9E9E9E9E9E8E8E8
>
4 %_Br
[
0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS
%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs
0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS
%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs
0.727382 0.088624 0.08365 0.000031 0 0.690196 0.847059 2 50 52.2472 %_BS
%_0.727382 0.088624 0.08365 0.000031 0 0.690196 0.847059 2 50 52.2472 Bs
0.459419 0.007385 0.064607 0.000031 0.498039 0.815686 0.909804 2 50 51.6854 %_BS
%_0.459419 0.007385 0.064607 0.000031 0.498039 0.815686 0.909804 2 50 51.6854 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Diamond Cubes)
(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [
%AI3_Tile
(0 O 0 R 0.175937 0.165347 0.272679 0.000031 0.827451 0.792157 0.717647 Xa
 0.175937 0.165347 0.272679 0.000031 0.827451 0.792157 0.717647 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
45.9316 56.8281 m
39.3691 45.4609 L
26.2471 45.4609 L
32.8066 56.8281 L
45.9316 56.8281 L
f
45.9316 34.0957 m
39.3691 22.7305 L
26.2471 22.7305 L
32.8066 34.0957 L
45.9316 34.0957 L
f
65.6162 22.7305 m
59.0537 11.3652 L
45.9316 11.3652 L
52.4932 22.7305 L
65.6162 22.7305 L
f
65.6162 45.4609 m
59.0537 34.0977 L
45.9316 34.0977 L
52.4932 45.4609 L
65.6162 45.4609 L
f
26.2471 22.7305 m
19.6846 11.3652 L
6.5605 11.3652 L
13.123 22.7305 L
26.2471 22.7305 L
f
26.2471 45.4609 m
19.6846 34.0977 L
6.5605 34.0977 L
13.123 45.4609 L
26.2471 45.4609 L
f
45.9316 79.5586 m
39.3691 68.1924 L
26.2471 68.1924 L
32.8066 79.5586 L
45.9316 79.5586 L
f
65.6162 68.1934 m
59.0537 56.8281 L
45.9316 56.8281 L
52.4932 68.1924 L
65.6162 68.1934 L
f
85.3018 56.8281 m
78.7402 45.4609 L
65.6162 45.4609 L
72.1777 56.8281 L
85.3018 56.8281 L
f
85.3018 34.0957 m
78.7402 22.7305 L
65.6162 22.7305 L
72.1777 34.0957 L
85.3018 34.0957 L
f
85.3018 79.5586 m
78.7402 68.1924 L
65.6162 68.1924 L
72.1777 79.5586 L
85.3018 79.5586 L
f
26.2471 68.1924 m
19.6846 56.8281 L
6.5605 56.8281 L
13.123 68.1924 L
26.2471 68.1924 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa
 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
26.2471 68.1924 m
19.6846 56.8281 L
26.2471 45.4609 L
32.8066 56.8281 L
26.2471 68.1924 L
f
26.2471 45.4609 m
19.6846 34.0957 L
26.2471 22.7305 L
32.8066 34.0957 L
26.2471 45.4609 L
f
26.2471 22.7305 m
19.6846 11.3652 L
26.2471 0 L
32.8066 11.3652 L
26.2471 22.7305 L
f
45.9316 34.0957 m
39.3691 22.7305 L
45.9316 11.3652 L
52.4932 22.7305 L
45.9316 34.0957 L
f
45.9316 56.8281 m
39.3691 45.4609 L
45.9316 34.0977 L
52.4932 45.4609 L
45.9316 56.8281 L
f
6.5605 34.0957 m
0 22.7305 L
6.5605 11.3652 L
13.123 22.7305 L
6.5605 34.0957 L
f
6.5605 56.8281 m
0 45.4609 L
6.5605 34.0977 L
13.123 45.4609 L
6.5605 56.8281 L
f
26.2471 90.9238 m
19.6846 79.5586 L
26.2471 68.1924 L
32.8066 79.5586 L
26.2471 90.9238 L
f
45.9316 79.5586 m
39.3691 68.1924 L
45.9316 56.8281 L
52.4932 68.1924 L
45.9316 79.5586 L
f
65.6162 68.1924 m
59.0537 56.8281 L
65.6162 45.4609 L
72.1777 56.8281 L
65.6162 68.1924 L
f
65.6162 45.4609 m
59.0537 34.0957 L
65.6162 22.7305 L
72.1777 34.0957 L
65.6162 45.4609 L
f
65.6162 22.7305 m
59.0537 11.3652 L
65.6162 0 L
72.1777 11.3652 L
65.6162 22.7305 L
f
85.3018 34.0957 m
78.7402 22.7305 L
85.3018 11.3652 L
91.8643 22.7305 L
85.3018 34.0957 L
f
85.3018 56.8281 m
78.7402 45.4609 L
85.3018 34.0977 L
91.8643 45.4609 L
85.3018 56.8281 L
f
65.6162 90.9238 m
59.0537 79.5586 L
65.6162 68.1924 L
72.1777 79.5586 L
65.6162 90.9238 L
f
85.3018 79.5586 m
78.7402 68.1924 L
85.3018 56.8281 L
91.8643 68.1924 L
85.3018 79.5586 L
f
6.5605 79.5576 m
0 68.1924 L
6.5605 56.8281 L
13.123 68.1924 L
6.5605 79.5576 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7891 7891 m
-7711.6558 7891 L
-7711.6558 7855.8276 L
-7891 7855.8276 L
-7891 7891 L
n
u
u
0 O
0.000397 0.462379 0.988952 0.000031 0.972549 0.603922 0.109804 Xa
0 R
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA
0.5 w-7729.8286 7856.0781 m
-7872.8276 7856.0781 L
-7872.8276 7858.6475 L
-7729.8286 7858.6475 L
-7729.8286 7856.0781 L
b
-7872.8276 7881.4829 m
-7729.8286 7881.4829 L
-7729.8286 7878.7109 L
-7872.8276 7878.7109 L
-7872.8276 7881.4829 L
b
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
-7872.8276 7858.6475 m
-7872.8276 7878.7109 L
-7729.8286 7878.7109 L
-7729.8286 7858.6475 L
-7872.8276 7858.6475 L
b
U
0.000397 0.462379 0.988952 0.000031 0.972549 0.603922 0.109804 Xa
-7751.1978 7890.6196 m
-7712.2544 7890.6196 L
-7714.4292 7888.3984 L
-7745.9976 7888.3984 L
-7751.1978 7890.6196 L
b
-7712.2544 7866.585 m
-7729.8286 7866.585 L
-7729.8286 7868.6797 L
-7714.3237 7868.6797 L
-7712.2544 7866.585 L
b
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
-7714.3237 7868.6797 m
-7729.8286 7868.6797 L
-7729.8286 7881.4829 L
-7745.9976 7888.3984 L
-7714.4292 7888.3984 L
-7724.6465 7879.1284 L
-7714.3237 7868.6797 L
b
0.000397 0.462379 0.988952 0.000031 0.972549 0.603922 0.109804 Xa
-7890.4019 7890.6196 m
-7851.4595 7890.6196 L
-7856.6587 7888.3984 L
-7888.2285 7888.3984 L
-7890.4019 7890.6196 L
b
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
-7872.8286 7868.6797 m
-7888.3345 7868.6797 L
-7878.0112 7879.1284 L
-7888.2285 7888.3984 L
-7856.6587 7888.3984 L
-7872.8286 7881.4829 L
-7872.8286 7868.6797 L
b
0.000397 0.462379 0.988952 0.000031 0.972549 0.603922 0.109804 Xa
-7872.8286 7866.585 m
-7890.4019 7866.585 L
-7888.3345 7868.6797 L
-7872.8286 7868.6797 L
-7872.8286 7866.585 L
b
-7851.4595 7890.6196 m
-7872.8286 7881.4829 L
S
u
0 O
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
-7751.1978 7881.4829 m
-7751.1978 7888.1836 L
-7735.5269 7881.4829 L
-7751.1978 7881.4829 L
b
0.000397 0.462379 0.988952 0.000031 0.972549 0.603922 0.109804 Xa
-7751.1978 7888.1836 m
-7751.1978 7890.6196 L
-7729.8286 7881.4829 L
-7735.5269 7881.4829 L
-7751.1978 7888.1836 L
b
-7872.8286 7881.4829 m
-7851.4595 7890.6196 L
-7851.4595 7888.1836 L
-7867.1294 7881.4829 L
-7872.8286 7881.4829 L
b
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
-7867.1294 7881.4829 m
-7851.4595 7888.1836 L
-7851.4595 7881.4829 L
-7867.1294 7881.4829 L
b
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 44)0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d1 XR
-7886.6665 7891 m
-7891 7891 L
-7891 7887.3989 L
-7886.6665 7887.3989 L
-7886.6665 7891 L
n
u
0 Ap
0 XR
-7889.9702 7890.3364 m
-7887.6963 7890.3364 L
-7887.6963 7888.0625 L
-7889.9702 7888.0625 L
-7889.9702 7890.3364 L
n
1 Ap
0 O
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
1 XR
-7887.6963 7889.1992 m
-7887.6963 7889.8267 -7888.2056 7890.3364 -7888.8335 7890.3364 c
-7889.4614 7890.3364 -7889.9702 7889.8267 -7889.9702 7889.1992 c
-7889.9702 7888.5718 -7889.4614 7888.0625 -7888.8335 7888.0625 c
-7888.2056 7888.0625 -7887.6963 7888.5718 -7887.6963 7889.1992 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 47)0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d1 XR
-7884.6064 7891 m
-7891 7891 L
-7891 7887.3989 L
-7884.6064 7887.3989 L
-7884.6064 7891 L
n
u
0 XR
-7888.9404 7890.3364 m
-7886.6665 7890.3364 L
-7886.6665 7888.0625 L
-7888.9404 7888.0625 L
-7888.9404 7890.3364 L
n
1 Ap
0 O
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
1 XR
-7886.6665 7889.1992 m
-7886.6665 7889.8267 -7887.1753 7890.3364 -7887.8032 7890.3364 c
-7888.4312 7890.3364 -7888.9404 7889.8267 -7888.9404 7889.1992 c
-7888.9404 7888.5718 -7888.4312 7888.0625 -7887.8032 7888.0625 c
-7887.1753 7888.0625 -7886.6665 7888.5718 -7886.6665 7889.1992 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 48)0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7891 7891 m
-7883.1465 7891 L
-7883.1465 7882.5957 L
-7891 7882.5957 L
-7891 7891 L
n
u
0 O
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
3.86371 M-7890.1582 7882.5957 m
-7889.6812 7882.5845 -7889.2842 7882.9595 -7889.2725 7883.4375 c
-7889.2593 7883.9141 -7889.6357 7884.3101 -7890.1138 7884.3237 c
-7890.5903 7884.3359 -7890.9878 7883.96 -7890.9995 7883.4824 c
-7891.0122 7883.0054 -7890.6357 7882.6069 -7890.1582 7882.5957 c
f
-7890.1357 7883.46 m
F
U
u
-7890.1558 7884.8184 m
-7889.6782 7884.8086 -7889.2813 7885.1846 -7889.2686 7885.6621 c
-7889.2563 7886.1382 -7889.6333 7886.5356 -7890.1104 7886.5488 c
-7890.5874 7886.5615 -7890.9849 7886.1846 -7890.9971 7885.7075 c
-7891.0093 7885.23 -7890.6328 7884.8345 -7890.1558 7884.8184 c
f
-7890.1333 7885.6846 m
F
U
u
-7890.1523 7887.0469 m
-7889.6753 7887.0342 -7889.2783 7887.4102 -7889.2661 7887.8877 c
-7889.2539 7888.3638 -7889.6304 7888.7612 -7890.1074 7888.7744 c
-7890.5845 7888.7871 -7890.9814 7888.4102 -7890.9937 7887.9326 c
-7891.0068 7887.4556 -7890.6299 7887.0581 -7890.1523 7887.0469 c
f
-7890.1299 7887.9102 m
F
U
u
-7890.1499 7889.2725 m
-7889.6724 7889.2588 -7889.2754 7889.6357 -7889.2627 7890.1133 c
-7889.25 7890.5894 -7889.6274 7890.9863 -7890.1045 7891 c
-7890.5815 7891.0127 -7890.9785 7890.6357 -7890.9912 7890.1582 c
-7891.0029 7889.6816 -7890.6274 7889.2832 -7890.1499 7889.2725 c
f
-7890.1274 7890.1357 m
F
U
u
-7888.1538 7883.6665 m
-7887.6763 7883.6533 -7887.2793 7884.0293 -7887.2666 7884.5068 c
-7887.2539 7884.9829 -7887.6309 7885.3804 -7888.1084 7885.3945 c
-7888.5854 7885.4063 -7888.9824 7885.0293 -7888.9946 7884.5527 c
-7889.0068 7884.0752 -7888.6304 7883.6768 -7888.1538 7883.6665 c
f
-7888.1304 7884.5293 m
F
U
u
-7888.1499 7885.8901 m
-7887.6729 7885.8789 -7887.2764 7886.2549 -7887.2632 7886.7324 c
-7887.2515 7887.21 -7887.6274 7887.6069 -7888.1055 7887.6191 c
-7888.5825 7887.6318 -7888.9795 7887.2549 -7888.9917 7886.7773 c
-7889.0039 7886.3008 -7888.6274 7885.9028 -7888.1499 7885.8901 c
f
-7888.1274 7886.7549 m
F
U
u
-7888.1475 7888.1157 m
-7887.6699 7888.1045 -7887.2729 7888.4805 -7887.2607 7888.9595 c
-7887.2485 7889.4341 -7887.6255 7889.8325 -7888.1025 7889.8447 c
-7888.5791 7889.8574 -7888.9766 7889.481 -7888.9888 7889.0029 c
-7889.0015 7888.5264 -7888.6245 7888.1279 -7888.1475 7888.1157 c
f
-7888.1245 7888.9805 m
F
U
u
-7886.0723 7884.7124 m
-7885.5952 7884.6997 -7885.1987 7885.0781 -7885.1865 7885.5532 c
-7885.1738 7886.0308 -7885.5508 7886.4287 -7886.0273 7886.4414 c
-7886.5054 7886.4541 -7886.9019 7886.0757 -7886.9141 7885.5996 c
-7886.9272 7885.1235 -7886.5498 7884.7261 -7886.0723 7884.7124 c
f
-7886.0503 7885.5781 m
F
U
u
-7886.0698 7886.9395 m
-7885.5928 7886.9253 -7885.1953 7887.3013 -7885.1831 7887.7788 c
-7885.1704 7888.2573 -7885.5474 7888.6543 -7886.0249 7888.6685 c
-7886.5024 7888.6797 -7886.8994 7888.3013 -7886.9116 7887.8252 c
-7886.9233 7887.3486 -7886.5469 7886.9512 -7886.0698 7886.9395 c
f
-7886.0474 7887.8013 m
F
U
u
-7884.0332 7885.7822 m
-7883.5557 7885.7695 -7883.1592 7886.1475 -7883.1465 7886.6255 c
-7883.1333 7887.1016 -7883.5103 7887.4985 -7883.9883 7887.5117 c
-7884.4653 7887.5225 -7884.8618 7887.1475 -7884.8745 7886.6685 c
-7884.8862 7886.1909 -7884.5098 7885.7949 -7884.0332 7885.7822 c
f
-7884.0103 7886.6475 m
F
U
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -
( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -
(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -
(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -
( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -
(rnOnPath Brush Tool/ Arrow Brush Circles/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(15 pt. Round)
(1 15 15 100 100 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt. Oval)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Round)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Oval)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt. Round)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Banner)
(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Arrow Brush Circles)
(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -
(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -
( 1 0 4 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
(White)
Pc
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
(Black)
Pc
0.000031 0.993988 1 0.000031 1 0 0 Xa
(RGB Red)
Pc
0.061982 0.000031 0.965148 0.000031 1 1 0 Xa
(RGB Yellow)
Pc
0.627649 0.000031 1 0.000031 0 1 0 Xa
(RGB Green)
Pc
0.517937 0.000031 0.125399 0.000031 0 1 1 Xa
(RGB Cyan)
Pc
0.883665 0.769161 0.000031 0.000031 0 0 1 Xa
(RGB Blue)
Pc
0.269902 0.816403 0.000031 0.000031 1 0 1 Xa
(RGB Magenta)
Pc
0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa
(R=237 G=28 B=36)
Pc
0.000031 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa
(R=241 G=90 B=36)
Pc
0.000366 0.500664 0.985656 0.000031 0.968627 0.576471 0.117647 Xa
(R=247 G=147 B=30)
Pc
0.000214 0.348486 0.871305 0.000031 0.984314 0.690196 0.231373 Xa
(R=251 G=176 B=59)
Pc
0.045136 0.000031 0.931884 0.000031 0.988235 0.933333 0.129412 Xa
(R=252 G=238 B=33)
Pc
0.188968 0.000397 0.98233 0.000031 0.85098 0.878431 0.129412 Xa
(R=217 G=224 B=33)
Pc
0.501091 0.001373 0.990387 0.000031 0.54902 0.776471 0.247059 Xa
(R=140 G=198 B=63)
Pc
0.746151 0.000031 0.99704 0.000092 0.223529 0.709804 0.290196 Xa
(R=57 G=181 B=74)
Pc
0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa
(R=0 G=104 B=55)
Pc
0.761959 0.000031 0.749783 0.000031 0.133333 0.709804 0.45098 Xa
(R=34 G=181 B=115)
Pc
0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.6972 0.14847 0.000031 0.000031 0.160784 0.670588 0.886275 Xa
(R=41 G=171 B=226)
Pc
0.875364 0.526451 0.000031 0.000031 0 0.443137 0.737255 Xa
(R=0 G=113 B=188)
Pc
0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa
(R=46 G=49 B=146)
Pc
1 1 0.262547 0.245243 0.105882 0.078431 0.392157 Xa
(R=27 G=20 B=100)
Pc
0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa
(R=147 G=39 B=143)
Pc
0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa
(R=158 G=0 B=93)
Pc
0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa
(R=212 G=20 B=90)
Pc
0.000031 0.970001 0.204959 0.000031 0.929412 0.117647 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.22855 0.274266 0.39942 0.000031 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa
(R=153 G=134 B=117)
Pc
0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa
(R=198 G=156 B=109)
Pc
0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.362341 0.574029 0.840574 0.226169 0.54902 0.384314 0.223529 Xa
(R=140 G=98 B=57)
Pc
0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa
(R=96 G=56 B=19)
Pc
0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa
(R=66 G=33 B=11)
Pc
Bb
2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Fade To Edge Black)
Pc
Bb
0 0 0 0 Bh
2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Neon Rings Vignette)
Pc
Bb
2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Water)
Pc
Bb
0 0 0 0 Bh
2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Pink Radial)
Pc
(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Diamond Cubes)
Pc
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
(R=0 G=0 B=0)
Pc
0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa
(R=26 G=26 B=26)
Pc
0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa
(R=51 G=51 B=51)
Pc
0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa
(R=77 G=77 B=77)
Pc
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
(R=102 G=102 B=102)
Pc
0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa
(R=128 G=128 B=128)
Pc
0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa
(R=153 G=153 B=153)
Pc
0.306798 0.242466 0.247654 0.000031 0.701961 0.701961 0.701961 Xa
(R=179 G=179 B=179)
Pc
0.193668 0.150057 0.155337 0.000031 0.8 0.8 0.8 Xa
(R=204 G=204 B=204)
Pc
0.084596 0.061311 0.065766 0.000031 0.901961 0.901961 0.901961 Xa
(R=230 G=230 B=230)
Pc
0.037049 0.025086 0.025086 0.000031 0.94902 0.94902 0.94902 Xa
(R=242 G=242 B=242)
Pc
0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 Xa
(R=63 G=169 B=245)
Pc
0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 Xa
(R=122 G=201 B=67)
Pc
0.000031 0.508354 0.961639 0.000031 1 0.576471 0.117647 Xa
(R=255 G=147 B=30)
Pc
0.000031 0.965057 0.900572 0.000031 1 0.113725 0.145098 Xa
(R=255 G=29 B=37)
Pc
0.000031 0.661738 0.032776 0.000031 1 0.482353 0.67451 Xa
(R=255 G=123 B=172)
Pc
0.253758 0.127169 0.116762 0.000031 0.741176 0.8 0.831373 Xa
(R=189 G=204 B=212)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
*u
1 D
0 O
0.734615 0.672541 0.658747 0.831296 0.062745 0.062745 0.062745 Xa
0 J 0 j 1 w 10 M []0 d0 XR
574.6816 -128.5508 m
574.6582 -128.4873 L
574.8447 -128.4985 575.0225 -128.5103 575.1943 -128.5225 C
574.7061 -127.0181 574.0596 -125.7778 573.3535 -125.2646 c
572.7959 -124.8584 571.5137 -124.6821 569.8721 -124.668 C
569.8145 -124.6714 L
567.9238 -121.4893 567.1953 -119.9277 564.8037 -124.9941 C
563.8193 -125.1079 562.8252 -125.2388 561.8584 -125.3979 C
561.874 -125.4131 561.8877 -125.4282 561.9033 -125.4434 C
561.2461 -125.6401 L
558.6455 -122.979 557.5635 -121.6069 556.4316 -127.0791 C
556.25 -127.1328 L
556.2813 -126.9624 556.3125 -126.8022 556.3447 -126.6421 C
555.3438 -126.9673 554.6406 -127.2983 554.4053 -127.6069 c
553.1123 -129.3125 556.3428 -139.9072 554.4053 -142.7065 c
552.4668 -145.5059 543.208 -147.4438 541.916 -145.5059 c
541.7744 -145.2935 541.8379 -143.9673 542.041 -141.7573 C
542.0098 -141.7744 541.9814 -141.7891 541.9502 -141.8057 C
542.0186 -141.314 L
544.9521 -139.7871 546.3076 -139.1772 542.6289 -136.0879 C
542.8984 -133.6187 543.2217 -130.7407 543.5693 -127.5522 C
546.7236 -125.3105 548.3477 -124.5059 544.0811 -121.4458 C
544.1035 -120.8569 L
544.165 -120.8979 544.2129 -120.9341 544.2725 -120.9741 C
544.6377 -117.4546 545.0107 -113.687 545.3652 -109.7666 C
548.8789 -107.3892 550.752 -106.5986 545.918 -103.3037 C
545.9209 -103.2725 545.9229 -103.2412 545.9248 -103.2104 C
545.9414 -102.749 L
546.21 -99.6299 546.4375 -96.4399 546.6328 -93.229 C
546.6025 -93.2441 546.5752 -93.2583 546.5459 -93.2734 C
546.5723 -92.8218 L
549.7646 -91.2202 551.2949 -90.6055 546.8721 -87.7446 C
546.9023 -87.2192 L
546.9229 -87.231 546.9365 -87.2407 546.957 -87.2524 C
547.2188 -81.6396 547.3584 -76.0522 547.3115 -70.7046 C
551.8936 -67.7935 554.4033 -66.8286 547.1191 -63.3931 C
547 -60.8135 546.8281 -58.3203 546.5898 -55.9473 C
546.5527 -55.9766 546.5166 -56.0054 546.4795 -56.0347 C
546.418 -55.4077 L
550.2998 -52.3999 552.2939 -51.2939 545.4922 -48.2534 C
544.2441 -41.79 542.2705 -36.8159 539.3057 -34.2388 c
519.4092 -16.9521 442.2158 -28.8984 434.249 -47.7446 c
429.9502 -57.9082 441.1396 -106.1001 443.7236 -106.9614 c
444.1074 -107.0889 444.6504 -107.0923 445.2949 -107.0283 C
446.0215 -111.9165 447.25 -110.0977 447.8105 -106.6284 C
448.4287 -106.5161 449.0742 -106.3999 449.7227 -106.3042 C
450.6797 -112.7314 452.3457 -110.4888 453.1094 -106.1274 C
455.0254 -106.3081 456.542 -107.166 456.8594 -109.5449 c
457.7207 -116.0054 452.2734 -113.8501 451.6904 -114.7134 c
450.8398 -115.9761 450.8291 -119.2349 454.0596 -120.7427 C
457.0742 -118.5894 518.6592 -102.8696 514.999 -118.5894 c
514.376 -121.2666 513.4863 -124.1226 512.499 -127.0654 C
507.0537 -126.249 495.4355 -125.7856 494.1279 -126.1665 c
492.2734 -126.7056 492.6826 -134.4404 493.7891 -134.8799 c
494.8213 -135.2881 495.3066 -130.3843 496.917 -130.4219 c
497.5693 -130.4365 500.2227 -134.8315 501.457 -134.4712 c
502.3281 -134.2178 500.582 -130.9766 501.2178 -129.8794 c
501.5967 -129.2251 507.8086 -129.3428 511.7754 -129.1982 C
510.4678 -132.9976 509.0635 -136.9106 507.8848 -140.77 C
502.6982 -139.9717 493.8096 -139.5703 492.5137 -139.9478 c
490.6592 -140.4873 491.0674 -148.2222 492.1738 -148.6606 c
493.2061 -149.0698 493.6914 -144.1655 495.3018 -144.2026 c
495.9541 -144.2178 498.6074 -148.6128 499.8418 -148.2529 c
500.7139 -147.999 498.9668 -144.7583 499.6025 -143.6602 c
499.9736 -143.021 503.96 -143.0796 507.2461 -142.9346 C
504.6016 -152.3149 503.7188 -161.1616 509.4775 -166.9443 c
511.6074 -169.084 514.915 -169.9751 518.8711 -169.998 c
519.1191 -169.9995 519.3848 -169.9775 519.6367 -169.9727 C
521.374 -175.2695 523.543 -180.4272 526.0654 -185.5308 C
525.8799 -185.5679 524.0508 -186.0093 524.0527 -186.0088 c
522.248 -186.5146 520.9229 -187.6938 521.0879 -188.6401 c
521.2393 -189.5928 526.3213 -188.9404 526.3359 -188.936 C
526.3496 -188.9297 522.5332 -191.4971 523.2441 -192.2441 c
523.9668 -192.9849 526.0332 -192.9277 527.8154 -192.1313 c
528.7012 -191.7363 532.0586 -190.7422 532.7549 -190.4971 c
534.6738 -189.8271 535.1826 -188.5381 534.4561 -187.3887 C
530.4629 -181.7056 527.1484 -175.7344 524.499 -169.5391 C
528.4541 -168.9336 532.7373 -167.7764 536.9883 -166.3169 c
537.1699 -166.2549 537.3496 -166.1875 537.5322 -166.124 C
539.2236 -171.3022 541.3516 -176.3394 543.8379 -181.3198 C
543.6533 -181.3564 541.8242 -181.8032 541.8262 -181.8027 c
540.0225 -182.3105 538.6924 -183.4712 538.8496 -184.3926 c
538.9912 -185.3208 544.0664 -184.6426 544.0801 -184.6382 C
544.0947 -184.6318 540.2666 -187.167 540.9717 -187.8896 c
541.6836 -188.606 543.7461 -188.5337 545.5303 -187.7417 c
546.417 -187.3496 549.7734 -186.353 550.4697 -186.1079 c
552.3887 -185.439 552.9063 -184.1782 552.1904 -183.063 C
547.9863 -177.1782 544.5645 -170.9639 541.8926 -164.5005 C
553.7002 -159.8306 564.0469 -153.6289 564.4648 -151.957 c
565.3271 -148.5117 563.1299 -133.4038 563.0186 -131.5093 c
562.9063 -129.6143 569.6934 -129.3555 571.416 -130.6479 c
573.1387 -131.9399 571.8467 -138.1846 574.6465 -137.5386 c
576.0225 -137.2207 576.3037 -134.665 575.9551 -131.9443 C
575.8643 -131.7017 L
578.4268 -129.7681 579.7139 -128.9414 574.6816 -128.5508 C
f
0 D
475.4639 -44.3169 m
470.2529 -44.9019 467.0752 -43.7051 467.2295 -40.9141 c
467.3584 -38.5454 471.0107 -36.1514 475.2998 -35.6689 c
479.5811 -35.1865 481.9756 -36.9004 482.7246 -39.1572 c
483.749 -42.2148 481.0029 -43.6792 475.4639 -44.3169 c
f
494.4648 -41.3965 m
489.8906 -41.9136 487.4102 -41.25 487.6689 -38.5977 c
487.8594 -36.6504 489.4697 -34.8247 493 -34.4199 c
496.5313 -34.0234 499.9092 -35.2637 500.4512 -37.1499 c
501.0977 -39.3638 498.7539 -40.9141 494.4648 -41.3965 c
f
*U
472.8242 -37.7368 m
471.1719 -37.7368 469.832 -38.9795 469.832 -40.5156 c
469.832 -42.0498 470.8066 -43.2939 472.8242 -43.2939 c
474.8418 -43.2939 475.8184 -42.0498 475.8184 -40.5156 c
475.8184 -38.9795 474.4775 -37.7368 472.8242 -37.7368 c
f
492.3984 -35.6934 m
491.1406 -35.6934 490.1211 -36.7036 490.1211 -37.9521 c
490.1211 -39.1992 490.8633 -40.2109 492.3984 -40.2109 c
493.9355 -40.2109 494.6787 -39.1992 494.6787 -37.9521 c
494.6787 -36.7036 493.6582 -35.6934 492.3984 -35.6934 c
f
U
*u
1 D
451.4883 -579.2178 m
450.7031 -578.4922 458.1582 -564.3262 451.7588 -561.8301 c
442.9082 -558.3799 440.2588 -565.6191 438.5596 -562.0332 C
438.6406 -559.2539 438.7578 -556.2686 438.9727 -553.1182 c
439.3086 -548.2148 439.0703 -542.9756 437.9648 -537.8672 C
437.9785 -537.8672 443.4414 -534.918 446.4824 -537.8145 c
450.79 -541.9189 447.9121 -547.2207 454.5781 -549.6777 c
461.0664 -552.0703 458.9072 -539.1475 454.0381 -534.0547 c
446.6699 -526.3467 433.5391 -537.7852 433.5039 -537.8164 C
432.9746 -537.8418 432.4141 -537.8672 431.7871 -537.8955 C
431.6895 -537.498 431.5195 -537.1406 431.252 -537.0762 c
430.5859 -536.9131 427.3877 -536.9131 426.8359 -537.084 c
426.5684 -537.165 426.5762 -537.6846 426.6484 -538.1875 C
423.8154 -538.293 420.7139 -538.3672 417.3867 -538.3994 C
417.2881 -537.9443 417.1094 -537.5137 416.8096 -537.4326 c
416.1436 -537.2695 412.9453 -537.2793 412.4004 -537.4414 c
412.1416 -537.5225 412.1328 -537.9688 412.1973 -538.4307 C
410.5498 -538.4404 408.8779 -538.4404 407.1563 -538.4404 c
405.6387 -538.4404 404.1611 -538.4404 402.6992 -538.4404 C
402.7402 -537.9844 402.707 -537.5459 402.4561 -537.4736 c
401.9043 -537.3027 398.7051 -537.3105 398.0391 -537.4814 c
397.7559 -537.5547 397.6016 -537.9609 397.5117 -538.4063 C
393.9561 -538.3672 390.6436 -538.3018 387.6406 -538.1797 C
387.6797 -537.7168 387.6563 -537.2627 387.3965 -537.1895 c
386.8438 -537.0186 383.6465 -537.0273 382.9795 -537.1895 c
382.7441 -537.2539 382.5977 -537.5469 382.501 -537.8955 C
375.0488 -537.3428 370.4766 -536.2227 370.4766 -533.9668 c
370.4766 -531.71 375.0488 -530.7754 382.5176 -530.3945 C
382.6064 -530.7275 382.7529 -531.0029 382.9795 -531.0605 c
383.6465 -531.2305 386.8438 -531.2393 387.3965 -531.0674 c
387.6318 -531.0029 387.6729 -530.6299 387.6484 -530.2158 C
390.6436 -530.1514 393.9473 -530.1348 397.5039 -530.126 C
397.5762 -530.5967 397.7314 -531.0674 398.0391 -531.1406 c
398.7051 -531.3115 401.9043 -531.3193 402.4561 -531.1494 c
402.7148 -531.0762 402.7402 -530.6055 402.6992 -530.1348 C
404.1523 -530.1348 405.6387 -530.1348 407.1563 -530.1348 c
408.8857 -530.1348 410.5586 -530.1348 412.2051 -530.1348 C
412.1328 -530.6133 412.1328 -531.1016 412.4004 -531.1816 c
412.9453 -531.3438 416.1436 -531.3516 416.8096 -531.1816 c
417.1348 -531.1084 417.3047 -530.6133 417.4023 -530.126 C
420.7227 -530.1348 423.8066 -530.1514 426.625 -530.2158 C
426.5762 -530.6621 426.5918 -531.084 426.8359 -531.1582 c
427.3877 -531.3281 430.5859 -531.3369 431.252 -531.166 c
431.5117 -531.1016 431.6738 -530.7754 431.7793 -530.3857 C
434.0039 -530.4424 435.084 -530.3945 435.6846 -530.54 C
430.5781 -518.3467 418.9365 -508.4424 395.6777 -508.2471 c
352.46 -507.8848 343.6953 -540.5977 345.1016 -563.2197 C
343.2383 -565.498 340.168 -559.2549 331.1289 -562.5078 c
324.1963 -565.002 332.2734 -579.1699 331.4219 -579.8945 c
329.5156 -581.5176 312.3623 -576.5117 312.3623 -584.833 c
312.3623 -588.5537 336.9932 -586.8633 337.2871 -585.9834 c
337.5801 -585.1035 330.1016 -573.1982 333.4746 -568.3262 c
336.4414 -564.04 343.5986 -568.5107 345.2764 -569.6475 C
344.291 -571.3564 342.7598 -574.3311 342.5039 -576.6875 c
342.1445 -579.9873 342.6816 -585.376 343.5215 -585.376 c
344.3613 -585.376 343.9863 -582.8262 344.877 -582.7998 c
345.4688 -582.7793 346.2979 -585.376 347.2393 -585.376 c
348.2832 -585.376 346.1445 -580.3145 346.1953 -576.6592 c
346.2148 -575.2676 346.3125 -574.0049 346.4238 -572.9727 C
347.709 -578.8652 349.6465 -583.0254 351.4404 -584.0244 c
359.6963 -588.6191 428.6865 -588.3516 435.9922 -581.7422 c
437.8066 -580.1045 438.1758 -575.6035 438.3711 -569.2197 C
438.3711 -569.2188 438.4023 -569.1934 438.4629 -569.1475 C
438.292 -571.4004 L
439.3398 -573.5176 439.3877 -576.4893 v
439.4346 -579.4629 437.4482 -583.5791 438.418 -583.5791 c
439.293 -583.5791 440.0625 -581.4688 440.6113 -581.4834 c
441.4395 -581.5068 441.0898 -583.5791 441.8691 -583.5791 c
442.6504 -583.5791 443.1172 -579.2012 442.8164 -576.5137 c
442.4395 -573.1729 439.6094 -569.8662 438.752 -568.9336 C
440.3887 -567.7393 446.8848 -563.4092 449.5938 -567.6494 c
452.7051 -572.5205 445.8047 -584.4277 446.0762 -585.3066 c
446.3477 -586.1855 469.0781 -587.8779 469.0781 -584.1563 c
469.0781 -575.835 453.248 -580.8408 451.4883 -579.2178 c
f
0 D
417.2559 -521.2373 m
418.1328 -518.3301 423.5068 -518.5986 422.5488 -522.3564 c
421.8828 -524.9297 416.3711 -524.1357 417.2559 -521.2373 c
f
345.6113 -569.0742 m
345.5859 -568.1563 L
345.6211 -568.418 345.6563 -568.6816 345.6934 -568.9395 C
345.666 -568.9863 345.6416 -569.0244 345.6113 -569.0742 C
f
376.9238 -519.1006 m
377.7676 -522.9004 370.6074 -523.4688 370.0156 -520.1006 c
369.1543 -515.1963 376.0879 -515.2939 376.9238 -519.1006 c
f
438.5576 -562.0938 m
438.4727 -565.3477 L
438.4971 -564.2988 438.5254 -563.2139 438.5576 -562.0938 C
f
*U
*u
1 D
550.3516 -472.0244 m
545.5625 -472.1367 546.3633 -451.4219 525.1406 -457.6924 C
516.6045 -451.542 498.1289 -451.4219 495.0723 -443.7559 C
493.332 -438.6055 500.79 -426.7881 497.457 -414.0664 C
504.6846 -411.8779 503.3232 -420.5596 508.0947 -418.1143 c
510.0068 -417.1416 511.8926 -414.5918 507.3799 -412.6104 c
504.0205 -411.1455 499.3701 -412.3174 497.1641 -413.0234 C
496.8467 -411.9902 496.4492 -410.9561 495.9756 -409.9141 c
491.4199 -399.957 475.8115 -385.2803 445.3291 -393.1172 C
444.4688 -391.4131 442.5127 -388.3721 439.2051 -387.46 c
434.5547 -386.1758 433.5459 -388.7773 433.9248 -390.4219 c
434.8467 -394.4443 441.2549 -388.7939 444.1318 -393.4365 C
430.9199 -397.1836 413.2617 -401.6719 416.0967 -421.9219 c
417.1113 -429.1787 421.8594 -432.3105 427.6924 -433.5342 C
427.7227 -434.4209 428.3438 -435.8916 429.4463 -435.7539 c
430.2764 -435.6436 430.6436 -434.7393 430.6426 -433.9961 C
431.9492 -434.1387 433.2871 -434.2051 434.6299 -434.2256 C
434.8613 -435.0234 435.4219 -435.8594 436.2656 -435.7539 c
437.0195 -435.6533 437.3838 -434.8994 437.4463 -434.2041 C
438.7969 -434.165 440.0752 -434.0898 441.3281 -434.0068 C
441.5137 -434.8594 442.0986 -435.8691 443.0205 -435.7539 c
443.9248 -435.6338 444.2725 -434.5771 444.2002 -433.8076 C
444.3672 -433.7959 444.5371 -433.7832 444.7002 -433.7734 c
445.9834 -433.6738 447.1855 -433.5869 448.2842 -433.5332 C
448.4619 -434.3906 449.0498 -435.4268 449.9834 -435.3105 c
450.8291 -435.1982 451.1904 -434.2617 451.1748 -433.5107 C
452.6777 -433.5908 453.7461 -433.8682 454.1836 -434.4971 c
457.1895 -438.8027 450.8936 -438.6563 450.6094 -442.6787 c
450.3242 -446.7021 455.2002 -447.416 456.208 -450.1299 c
457.2158 -452.8428 454.4854 -462.4902 458.792 -470.0264 C
459.791 -472.2139 461.9443 -473.9287 464.916 -475.2627 C
463.9941 -481.3877 461.8936 -497.9854 465.8799 -499.0107 c
469.7227 -500.002 470.1621 -484.0234 470.1699 -477.0381 C
472.7813 -477.7041 475.7119 -478.1982 478.8291 -478.5566 C
478.459 -483.4092 476.6201 -510.3018 481.3057 -510.3301 c
486.8096 -510.3643 484.2451 -482.8018 483.8672 -479.0068 C
487.7793 -479.2676 491.8721 -479.3506 495.9512 -479.3057 C
495.6299 -484.3955 495.1152 -498.4502 499.207 -498.8516 c
503.4502 -499.2656 501.792 -483.6699 501.1973 -478.9609 C
504.6758 -478.6611 507.8125 -478.3789 510.6182 -478.0547 C
510.1006 -485.9014 509.0156 -507.8047 513.2451 -507.8301 c
518.0088 -507.8652 516.3379 -483.2393 515.8633 -477.3311 C
525.4854 -475.7109 529.748 -472.7832 529.4209 -464.6523 C
529.3701 -464.0664 529.2656 -463.5059 529.1191 -462.9727 C
531.2041 -463.7129 533.8926 -463.6006 534.8477 -471.9131 c
535.4326 -477.0381 535.8389 -482.8516 Y
539.3086 -479.4922 539.1885 -475.7813 Y
541.7041 -477.8652 544.7871 -482.9902 Y
545.9072 -478.7695 540.9111 -470.7842 Y
543.8916 -472.7217 550.3516 -472.0244 Y
f
0 D
442.1602 -417.8213 m
440.4805 -417.7529 439.627 -416.6152 439.6865 -414.9355 c
439.7559 -413.2471 440.6963 -412.1807 442.375 -412.2402 c
444.0547 -412.3086 444.916 -413.4453 444.8467 -415.126 c
444.7861 -416.8135 443.8389 -417.8818 442.1602 -417.8213 c
f
472.6934 -418.8457 m
465.9756 -418.8457 467.2158 -410.0596 472.6934 -410.0596 c
477.7324 -410.0596 479.4131 -418.8457 472.6934 -418.8457 c
f
*U
*u
1 D
576.9531 -543.2012 m
576.9727 -542.3711 576.8477 -541.46 576.5693 -540.4746 C
577.7881 -540.2012 580.3867 -539.3838 579.7754 -537.6084 c
579.1182 -535.6924 576.4307 -537.4238 575.5439 -538.0605 C
575.041 -537.25 574.4502 -536.667 573.8027 -536.2637 C
574.3213 -535.2148 575.4355 -532.4971 573.5889 -531.8496 c
571.6475 -531.1699 571.3691 -534.4727 571.3301 -535.5127 C
567.1748 -535.2783 562.3564 -539.0859 Y
562.3369 -539.4551 L
562.3613 -528.5254 561.0732 -518.2441 557.2158 -512.0879 C
557.9629 -508.998 559.4912 -500.5977 554.3701 -500.0508 c
551.0205 -499.6934 550.2051 -503.2012 550.1689 -506.5547 C
533.9268 -502.0918 515.873 -515.9854 508.3467 -523.9863 C
505.4902 -520.5439 499.8936 -514.7764 496.708 -518.0752 c
492.9902 -521.9219 501.9033 -528.2275 504.7559 -530.0879 C
504.9795 -534 506.8408 -545.1572 509.0693 -556.3848 C
507.7275 -556.3262 502.3613 -556.2441 499.0508 -558.4883 C
498.4766 -557.623 496.5049 -554.9521 495.0176 -556.6484 c
493.6064 -558.2578 496.0752 -559.9434 497.1064 -560.5469 C
496.7021 -561.2637 496.4473 -562.1025 496.3906 -563.084 C
495.2246 -563.043 491.7773 -563.0928 492.1484 -565.1133 c
492.4951 -566.9922 495.3809 -566.1885 496.6689 -565.7295 C
496.916 -566.7402 497.2422 -567.5957 497.6279 -568.3252 C
496.6797 -568.834 493.3945 -570.7539 494.9316 -572.1992 c
496.2803 -573.4688 498.3115 -571.4609 499.2275 -570.3984 C
503.1309 -573.8047 509.6006 -570.8223 511.8857 -569.5859 C
513.7471 -577.6387 515.5234 -583.8848 516.5742 -584.6953 c
519.6846 -587.0938 555.0166 -589.2383 556.7783 -584.6953 c
557.5498 -582.7051 560.4658 -568.6357 561.7402 -552.9492 C
563.2881 -552.8311 574.0664 -551.8154 576.4756 -545.6855 C
577.4951 -546.0879 580.4521 -547.0635 580.9443 -545.1113 c
581.4717 -543.0117 577.7842 -543.1426 576.9531 -543.2012 C
f
/BBAccumRotation (0.000000) XT
0 D
514.5537 -543.7588 m
513.3594 -536.2793 523.2725 -536.3789 524.4424 -542.1816 c
525.6172 -547.9844 515.3701 -548.8994 514.5537 -543.7588 c
f
/BBAccumRotation (0.000000) XT
546.3828 -555.0703 m
546.0039 -554.334 545.5361 -553.6221 545.1035 -553.5322 c
544.3076 -553.3633 541.5508 -554.7617 541.332 -555.4336 c
541.1426 -556.0313 541.3418 -556.8711 541.6104 -557.5977 C
540.6846 -557.9463 539.6494 -558.2852 538.4805 -558.6182 c
537.3164 -558.9531 536.2607 -559.2109 535.291 -559.4102 C
535.1465 -558.5098 534.9023 -557.5137 534.4688 -557.2646 c
533.7578 -556.8516 530.7021 -557.3145 530.2988 -557.8818 c
529.9658 -558.3496 529.8857 -559.127 529.9102 -559.8525 C
524.9248 -559.3252 524.8496 -555.2793 524.0684 -551.0742 c
524.0088 -550.75 525.1377 -550.1641 526.915 -549.4668 C
527.1895 -550.2832 527.626 -551.2676 528.2539 -551.6465 c
528.8516 -552.0039 531.8418 -551.2334 532.3291 -550.5713 c
532.6934 -550.084 532.3496 -548.6602 532.0518 -547.7012 C
534.0254 -547.0781 536.1465 -546.4707 538.1523 -545.9473 C
538.4102 -546.8047 538.877 -547.9941 539.5801 -548.416 c
540.1777 -548.7793 543.168 -548.0039 543.6563 -547.3418 c
543.9893 -546.8984 543.7305 -545.6699 543.457 -544.7246 C
545.3574 -544.3701 546.6406 -544.2773 546.7461 -544.6094 c
547.96 -548.4512 550.1553 -551.9648 546.3828 -555.0703 C
f
/BBAccumRotation (0.000000) XT
549.0498 -535.6484 m
548.4775 -538.1152 543.6953 -537.3555 544.457 -534.5781 c
545.2227 -531.8047 549.8867 -532.0645 549.0498 -535.6484 c
f
/BBAccumRotation (0.000000) XT
*U
/BBAccumRotation (0.000000) XT
*u
1 D
191.4883 -23.7734 m
187.6123 -30.6641 178.999 -31.5254 V
202.918 -50.0786 191.6348 -84.4971 184.5977 -93.6875 C
180.145 -100.1479 154.0205 -110.1909 150.8154 -96.1602 c
147.6128 -82.1206 154.5972 -35.9785 135.9321 -20.811 c
128.3096 -14.626 20.5142 -49.1826 16.7588 -56.5039 c
13.0117 -63.8252 31.2803 -146.0825 36.8794 -151.2505 c
37.4897 -151.814 39.167 -152.2803 41.6763 -152.6611 C
42.4272 -152.6611 L
46.792 -159.5449 44.2725 -193.5425 45.6362 -195.1782 c
47.0718 -196.9014 56.1152 -196.6177 57.1206 -194.6074 c
57.8867 -193.0747 53.4854 -159.2793 54.9673 -157.4263 c
56.1152 -155.9902 60.8525 -155.7036 61.8574 -156.8516 c
62.8628 -158.0005 63.0063 -199.7114 64.7285 -201.354 c
66.4512 -202.9971 77.8613 -203.0137 79.0098 -201.0674 c
80.1577 -199.1211 73.4863 -157.4438 74.4907 -155.9902 c
75.4956 -154.5371 78.7974 -153.6587 79.9458 -154.5376 c
81.0938 -155.417 81.9551 -186.4248 82.9604 -187.7168 c
83.9658 -189.0088 92.5791 -188.5747 93.2964 -187.4263 c
94.4497 -185.5806 90.4375 -159.5703 92.0044 -155.9902 c
93.0093 -153.6938 97.6021 -153.228 100.9043 -154.5376 c
104.207 -155.8477 102.0532 -199.4878 102.915 -200.7793 c
103.7764 -202.0718 118.1318 -202.5024 119.2803 -200.7793 c
120.4282 -199.0571 111.3843 -156.3867 115.2603 -154.5376 c
119.1367 -152.689 121.2896 -152.5107 123.0127 -154.5376 c
124.7349 -156.5649 124.4482 -186.8555 125.3096 -187.8599 c
126.1709 -188.8647 134.292 -189.7236 135.7886 -188.144 c
137.2231 -186.6309 131.8193 -156.6113 135.2988 -152.2329 C
139.4429 -151.9067 142.2056 -151.5684 142.9956 -151.2505 c
148.3359 -149.0972 151.29 -142.4907 146.6992 -141.061 c
140.8159 -139.2178 117.1294 -144.937 126.7417 -122.2495 c
127.9482 -119.4072 197.0869 -136.6079 208.2842 -86.5908 c
217.7593 -43.1533 191.4883 -23.7734 Y
f
0 D
66.1641 -55.9272 m
74.9766 -51.8452 89.0933 -52.3188 94.4419 -57.0811 c
104.9243 -66.4097 106.0703 -126.7026 102.9175 -131.4399 c
99.7563 -136.1772 88.7056 -135.5313 87.9819 -134.6011 c
87.2671 -133.6626 87.6978 -128.2964 86.5522 -128.3218 c
85.3984 -128.356 84.2524 -134.1021 83.5371 -134.8511 c
82.814 -135.6006 74.6313 -135.5313 73.9165 -134.6011 c
73.2017 -133.6626 72.8398 -127.418 71.3325 -127.1333 c
69.8252 -126.8491 70.3247 -133.5244 69.7563 -134.1699 c
69.1792 -134.8164 63.0034 -136.0308 56.9736 -130.5786 c
50.9448 -125.126 52.2368 -62.3867 66.1641 -55.9272 c
f
113.9766 -81.5859 m
112.1162 -66.771 127.1123 -67.0645 128.9385 -78.5635 c
130.7559 -90.0615 115.2603 -91.7759 113.9766 -81.5859 c
f
145.9497 -81.5435 m
144.5112 -89.3467 132.5908 -86.9443 134.4941 -78.1582 c
136.4058 -69.3809 148.0337 -70.1997 145.9497 -81.5435 c
f
*U
*u
1 D
280.5205 -458.2764 m
283.4736 -465.2529 280.5205 -477.5889 269.2559 -477.3223 C
252.3574 -480.8066 239.2168 -454.792 204.6162 -459.3467 C
177.2568 -461.4951 146.1406 -477.5889 147.4844 -518.8926 c
147.959 -533.5547 153.0996 -543.3145 160.5674 -549.7598 C
160.1016 -550.1465 152.5938 -556.3584 152.3125 -557.9834 c
152.0234 -559.665 157.6875 -566.3682 160.0039 -566.3682 c
162.1621 -566.3682 170.3037 -557.7256 171.4785 -556.4619 C
173.6758 -557.4043 175.9443 -558.1924 178.2627 -558.8447 C
173.917 -570.6973 174.5371 -572.4844 v
175.1641 -574.2705 184.8525 -577.2705 187.3076 -575.8555 c
189.3506 -574.6729 192.3682 -564.7588 193.3184 -561.4756 C
199.4102 -562.0137 205.332 -561.9902 210.5137 -561.8125 c
218.6162 -561.5322 229.0781 -559.7373 239.8203 -556.833 C
243.5537 -570.4639 245.002 -571.623 v
246.459 -572.7891 255.7363 -571.2363 256.9277 -569.1279 c
258.1113 -567.0195 253.0566 -552.7285 Y
257.1367 -551.2891 261.1367 -549.7207 264.9326 -548.0293 C
272.3447 -560.2529 273.9385 -560.8486 v
275.5303 -561.4521 283.1826 -557.1543 283.627 -554.8779 c
283.9971 -552.9219 278.0811 -544.5449 276.3848 -542.1875 C
282.0166 -538.8564 286.6436 -535.252 289.6455 -531.502 C
289.1064 -531.6865 288.4141 -531.8154 287.5928 -531.8799 c
286.3701 -531.9766 284.8672 -531.9531 283.1826 -531.7998 c
282.5752 -531.7441 281.9414 -531.6699 281.2939 -531.582 C
281.9785 -529.1982 281.8926 -525.4746 279.5537 -525.1836 c
277.4561 -524.9287 275.5293 -528.084 274.9795 -530.3369 C
274.3789 -530.1826 273.7773 -530.0205 273.1807 -529.8447 c
271.7676 -529.4248 270.3662 -528.9473 269.0273 -528.4102 C
270.417 -526.3945 271.5654 -522.0566 269.1221 -521.1748 c
267.0371 -520.4287 264.3018 -523.3789 263.3799 -525.4844 C
263.2832 -525.4189 263.1768 -525.3564 263.083 -525.29 c
258.5605 -522.0713 256.7734 -517.8066 261.748 -512.7285 c
263.9961 -510.4336 266.6572 -508.7871 269.541 -507.6758 C
270.1191 -510.0762 271.9111 -513.1211 274.0518 -512.2949 c
275.877 -511.584 276.1855 -508.3574 275.7588 -506.1016 C
278.541 -505.7285 281.3994 -505.7207 284.2129 -506.0117 C
283.4131 -508.3086 283.5068 -512.918 286.1367 -513.0752 c
288.4033 -513.2031 290.2188 -509.417 290.4375 -507.1494 C
292.6611 -507.7324 297.7095 -509.8154 298.1919 -510.0596 C
297.1196 -512.1338 296.5767 -514.9238 298.4282 -515.7813 c
299.959 -516.4844 302.0469 -515.0859 303.4473 -513.4863 C
304.8477 -514.6992 305.9102 -515.9844 306.543 -517.2832 C
311.0977 -506.8223 304.1289 -467.3936 280.5205 -458.2764 C
f
0 D
257.1367 -494.8809 m
255.752 -485.7969 266.9053 -485.9727 268.2656 -493.0234 c
269.6162 -500.0791 258.0859 -501.1338 257.1367 -494.8809 c
f
283.8604 -493.6016 m
282.7979 -498.3896 273.9297 -496.9092 275.3467 -491.5254 c
276.7627 -486.1426 285.4131 -486.6406 283.8604 -493.6016 c
f
*U
*u
1 D
485.0723 -162.7637 m
485.0723 -149.502 472.3105 -144.8887 466.7656 -144.6396 c
461.2314 -144.3789 436.9658 -145.8066 438.7275 -153.1416 c
440.4912 -160.4736 462.3203 -160.917 464.7012 -163.6582 c
467.0801 -166.3906 460.9414 -173.373 Y
460.9961 -173.4297 L
451.7256 -166.459 436.2021 -162.083 421.0166 -159.6924 c
420.9668 -159.6836 420.916 -159.6777 420.8652 -159.6689 C
420.0791 -156.4053 417.376 -148.6924 416.3369 -148.4512 c
415.2695 -148.1895 409.7695 -155.1846 407.9932 -158.083 C
407.8711 -158.0723 407.7471 -158.0586 407.627 -158.0479 c
406.415 -157.9463 405.2256 -157.8438 404.0576 -157.7656 c
403.9707 -157.7588 403.8867 -157.7549 403.8008 -157.748 C
402.2764 -154.0879 395.834 -143.0156 394.2148 -142.9307 c
392.5273 -142.8359 385.7383 -155.1904 384.5322 -158.7754 C
384.4707 -158.791 384.4092 -158.8047 384.3486 -158.8203 c
360.5205 -164.793 335.418 -187.3027 Y
335.8965 -187.4092 L
330.7686 -186.7813 326.4404 -189.5244 324.4688 -194.501 c
322.123 -200.3945 324.457 -205.9834 330.7988 -208.2275 c
336.5859 -210.2754 341.7754 -208.1318 344.4229 -203.2734 C
372.5283 -202.5107 411.3213 -192.3301 414.0811 -195.6787 c
416.8643 -199.0342 402.6318 -201.3799 403.8105 -203.9541 c
404.1357 -204.668 407.2559 -205.3594 411.6328 -206.0049 C
409.4219 -211.0039 410.6689 -215.2559 411.9365 -217.7705 C
410.8135 -217.5664 408.9619 -217.5664 407.8623 -218.1904 c
406.2803 -219.0859 407.9971 -221.6133 409.501 -221.4434 c
410.3086 -221.3418 411.2852 -220.5254 411.9932 -219.709 C
411.8584 -220.6836 411.8809 -221.8633 412.2842 -222.7354 c
413.082 -224.4238 415.8311 -223.3477 415.7744 -221.8857 c
415.7412 -221.0352 414.8545 -219.8115 414.0137 -218.9502 C
415.0791 -219.2334 416.4932 -219.415 417.4922 -219.0967 c
419.2441 -218.5313 418.0762 -215.7646 416.5381 -215.6406 c
415.5723 -215.5723 414.1357 -216.4336 413.2617 -217.2041 C
413.082 -213.7256 413.3955 -208.2939 416.707 -206.6748 C
419.4121 -206.9922 422.2979 -207.2861 425.1475 -207.5693 C
423.8779 -214.6768 427.0557 -219.3232 429.5361 -221.7607 C
428.2559 -221.9531 426.2705 -222.6328 425.3271 -223.71 c
423.958 -225.2637 426.708 -227.3486 428.2559 -226.6123 c
429.0742 -226.2148 429.8389 -224.957 430.2871 -223.8232 C
430.4893 -224.9229 430.9502 -226.2041 431.7012 -226.9863 c
433.1621 -228.5166 435.7197 -226.3516 435.1367 -224.7871 c
434.7881 -223.8926 433.3857 -222.8945 432.1855 -222.2715 C
433.4307 -222.2031 435.001 -221.874 435.9443 -221.1602 c
437.6172 -219.9131 435.3613 -217.3633 433.6777 -217.7939 c
432.623 -218.0664 431.3877 -219.5283 430.7246 -220.6611 C
429.2773 -216.9658 427.6279 -210.9932 430.6123 -208.0459 C
437.6514 -208.6465 443.3184 -209.0098 Y
445.8896 -209.3496 449.4248 -209.0205 V
449.2559 -214.8691 452.2979 -218.4063 454.5986 -220.2422 C
453.4883 -220.5254 451.8037 -221.3076 451.0635 -222.3271 c
449.9971 -223.8008 452.6123 -225.3887 453.9033 -224.5947 c
454.5879 -224.1748 455.1484 -223.0088 455.4521 -221.9766 C
455.7207 -222.9287 456.2373 -223.9941 456.9785 -224.6182 c
458.4043 -225.8193 460.458 -223.6992 459.7949 -222.3838 c
459.4131 -221.625 458.0684 -220.8652 456.9453 -220.4453 C
458.0449 -220.2764 459.4131 -219.8457 460.1895 -219.1426 c
461.5576 -217.8955 459.3359 -215.8672 457.8994 -216.3994 c
456.9785 -216.7285 456.0352 -218.1113 455.5527 -219.166 C
453.9473 -216.0703 451.9727 -211.0264 454.2959 -208.1699 C
457.0342 -207.4443 459.8955 -206.2207 462.3887 -204.2041 C
464.4316 -209.2021 468.7305 -211.8877 472.041 -212.9316 C
471.1436 -213.5996 470.0879 -214.6436 469.7402 -215.6523 c
469.1572 -217.374 472.1084 -218.1328 473.1191 -217.001 c
473.6582 -216.3877 473.8594 -215.1074 473.8359 -214.0313 C
474.3643 -214.8574 475.1729 -215.7422 476.0596 -216.1172 c
477.7764 -216.8643 479.123 -214.2227 478.1123 -213.1699 c
477.5293 -212.5566 476.0361 -212.2285 474.835 -212.1377 C
475.835 -211.6504 477.002 -210.8457 477.541 -209.9502 c
478.4844 -208.3633 475.7666 -207.0596 474.5439 -207.9893 c
473.7588 -208.5898 473.2539 -210.2559 473.1191 -211.4121 C
470.3232 -208.7939 465.9346 -204.0664 465.9346 -200.3389 C
467.7871 -197.6064 469.1113 -194.0479 469.5156 -189.4111 c
469.9092 -184.9238 468.3936 -181.001 465.4639 -177.5771 C
465.5537 -177.6582 L
485.0723 -176.0352 485.0723 -162.7637 v
f
0 D
448.7168 -153.9678 m
448.5947 -154.4102 450.5693 -158.1494 450.1416 -158.3203 c
449.7285 -158.4902 440.1201 -154.9658 440.5801 -152.0186 c
441.04 -149.083 449.7285 -147.2803 450.1416 -147.7676 c
450.5693 -148.2549 448.4268 -150.5898 448.6396 -150.8965 c
448.8408 -151.1914 452.4551 -151.6436 452.3311 -152.6074 c
452.208 -153.5703 448.8408 -153.5371 448.7168 -153.9678 c
f
415.7861 -151.5684 m
416.4258 -151.7158 418.3574 -159.6924 418.0645 -159.7266 C
417.874 -159.7598 411.5781 -159.0225 411.4648 -158.8428 C
411.3076 -158.5254 415.1592 -151.4092 415.7861 -151.5684 c
f
394.2246 -147.2832 m
395.1563 -147.3291 399.3994 -157.5977 399.0059 -157.7227 c
398.7363 -157.8135 389.624 -157.6631 389.4326 -157.4473 C
389.1182 -157.0625 393.2822 -147.2266 394.2246 -147.2832 c
f
332.7295 -201.166 m
323.1211 -199.3975 328.1045 -188.7998 337.4775 -191.3154 c
344.1436 -193.1055 339.4414 -202.3906 332.7295 -201.166 c
f
381.7666 -167.875 m
380.8242 -163.6582 386.0537 -163.3643 386.918 -166.6182 c
387.7715 -169.8711 382.4063 -170.7656 381.7666 -167.875 c
f
402.1719 -167.8867 m
401.5879 -171.6621 394.6182 -171.0264 395.4375 -166.7646 c
396.2568 -162.5029 403.0029 -162.3896 402.1719 -167.8867 c
f
*U
*u
1 D
402.3564 -323.5615 m
390.1523 -307.0576 313.0625 -349.2627 312.7783 -359.7373 c
312.4941 -370.2197 354.4063 -414.7236 354.6992 -429.5049 c
354.6992 -437.4033 353.1572 -453.46 344.501 -458.6514 c
338.041 -462.5283 330.4355 -447.3076 340.0566 -432.0889 C
325.8447 -436.9717 327.4199 -458.9365 334.5957 -468.2646 c
336.3574 -470.5498 339.0518 -472.5459 342.1875 -474.1299 C
339.1387 -479.7842 335.3789 -490.21 334.8965 -492.0889 c
334.2246 -494.6982 343.7686 -501.7803 345.0781 -500.96 c
346.3008 -500.2021 340.7793 -494.8799 341.9688 -493.1064 c
342.4512 -492.3818 349.5918 -493.6826 350.0391 -491.9424 c
350.3496 -490.7197 345.2334 -489.5225 344.3721 -487.7393 c
343.8232 -486.5869 345.0586 -480.2393 346.4102 -475.917 C
351.2725 -477.6279 356.6191 -478.3955 361.1367 -477.8525 C
362.6143 -484.3428 363.2852 -489.6143 363.6396 -491.5557 c
364.1133 -494.208 375.7422 -496.6709 376.5859 -495.3877 c
377.3867 -494.1904 370.1426 -491.6416 370.4873 -489.5303 c
370.625 -488.6787 377.6621 -486.8857 377.3438 -485.1201 c
377.1191 -483.8721 370.3672 -485.542 368.834 -484.2764 c
367.8682 -483.4795 366.1611 -480.5361 365.8965 -476.6455 C
367.7227 -475.8525 369.2188 -474.7061 370.2031 -473.1494 C
372.2441 -467.1709 368.5664 -461.2197 364.5449 -456.5771 C
367.5664 -455.7842 372.0801 -455.0498 372.7422 -455.6982 c
373.75 -456.6631 375.7051 -460.6338 376.4902 -460.4717 c
377.5938 -460.2295 375.7715 -454.3721 376.2598 -454.0049 c
377.4629 -453.085 381.9102 -457.833 382.4951 -456.7783 c
383.1221 -455.6494 377.999 -447.0225 376.3379 -447.3818 c
375.0996 -447.6514 366.7754 -451.6143 362.5459 -454.3975 C
359.6094 -451.3311 356.9561 -449.083 356.7061 -448.1709 c
356.1719 -446.2061 360.4268 -439.7021 361.874 -429.8662 c
363.4238 -419.3252 362.7529 -407.3096 364.458 -405.6807 c
367.7568 -402.5186 378.0938 -401.5107 379.9619 -398.2119 c
381.8311 -394.9131 376.5166 -385.0068 Y
375.8018 -388.7373 372.4941 -390.7451 v
372.2529 -390.8916 372.0029 -391.0381 371.7617 -391.167 C
371.668 -389.6436 368.5488 -386.6357 367.8857 -387.1787 c
367.2314 -387.7217 366.6973 -392.2959 367.7402 -392.8467 C
366.25 -393.2588 364.8281 -393.415 363.4932 -393.3467 C
364.209 -392.1318 362.0723 -387.1025 361.2285 -387.2061 c
360.3848 -387.2998 357.6709 -390.8486 358.4805 -391.7451 c
358.5586 -391.8311 358.6523 -391.917 358.7734 -392.0107 C
353.6826 -389.1084 351.5293 -381.8916 355.2676 -373.8115 C
355.7148 -372.165 357.3604 -370.4268 359.79 -368.6943 c
359.8701 -368.6396 359.9609 -368.5811 360.0439 -368.5244 C
360.8984 -369.9072 363.6387 -371.6787 364.166 -371.167 c
364.6973 -370.6416 364.752 -367.1104 363.9473 -366.1396 C
366.5703 -364.6943 369.5986 -363.292 372.7803 -361.9834 C
373.918 -363.5088 376.5391 -365.4795 377.0254 -365.0088 c
377.4355 -364.6025 377.377 -362.0342 376.9229 -360.3701 C
379.3652 -359.4521 381.8262 -358.5967 384.2109 -357.8408 C
384.6084 -359.3936 388.165 -362.3135 388.877 -362.001 c
389.5273 -361.7061 389.7383 -357.917 389.1797 -356.3389 C
390.7871 -355.8818 392.3125 -355.4775 393.709 -355.1455 c
393.7285 -355.1396 393.748 -355.1377 393.7676 -355.1318 C
394.373 -356.6221 396.9531 -358.8232 397.5508 -358.376 c
398.0352 -358.0166 398.4561 -355.6768 398.2441 -354.2197 C
399.7383 -353.9756 400.8672 -353.8936 401.4951 -353.999 c
406.6631 -354.8623 408.1016 -364.0439 Y
413.2695 -338.7803 402.3564 -323.5615 v
f
0 D
359.2207 -467.5498 m
359.5313 -469.6924 351.8652 -474.8877 350.9434 -474.1553 c
350.0908 -473.4893 354.6133 -469.4873 353.8555 -467.9971 c
353.5527 -467.3994 348.1094 -468.0771 347.9023 -466.6533 c
347.7559 -465.6494 351.6758 -464.96 352.459 -463.5615 c
353.002 -462.585 351.168 -457.2979 351.7188 -456.2217 c
351.8027 -456.0557 352.3115 -455.8525 352.5371 -455.8896 c
354.5918 -456.2373 358.9971 -465.9619 359.2207 -467.5498 c
f
327.291 -358.4541 m
323.7598 -351.3564 333.3633 -348.4697 336.3438 -353.9053 c
339.3242 -359.3408 329.7207 -363.3389 327.291 -358.4541 c
f
340.7461 -352.2861 m
340.5732 -347.4717 348.1094 -345.5342 348.584 -351.6846 c
348.9023 -355.9131 340.918 -357.1104 340.7461 -352.2861 c
f
*U
*u
1 D
142.3481 -217.728 m
139.2305 -215.0225 97.1885 -230.4067 71.7275 -241.2769 C
70.3413 -237.3662 65.0957 -225.0234 63.7256 -225.1177 c
62.1064 -225.2207 61.9258 -244.5317 62.0981 -245.5142 C
59.3843 -246.7979 57.1367 -247.9175 55.4917 -248.8218 C
56.4736 -246.2295 38.1274 -235.3765 37.1279 -237.2793 c
36.7319 -238.021 49.6777 -254.6274 50.4355 -255.4194 C
47.4717 -264.5186 44.7622 -283.999 42.8628 -303.8105 C
42.8535 -303.2041 L
33.752 -299.0078 25.0137 -301.8066 20.6943 -303.791 C
20.7988 -302.5527 20.3271 -299.7891 19.061 -298.2646 c
17.4683 -296.3496 14.6304 -298.5078 15.2632 -300.3428 c
15.6025 -301.3252 16.9395 -302.5127 18.1851 -303.3545 C
16.8779 -303.209 15.3379 -303.2637 14.3154 -303.7783 c
12.3159 -304.7881 14.4575 -308.1416 16.3545 -308.04 c
17.4526 -307.9805 18.8257 -306.8545 19.7236 -305.8076 C
19.6187 -307.125 19.7637 -308.8604 20.4443 -310.0732 c
21.6465 -312.2129 24.9502 -310.7158 24.6958 -308.8398 c
24.5303 -307.6211 22.9487 -305.8242 21.707 -304.7754 C
27.666 -304.125 38.8735 -303.542 42.4956 -307.7588 C
40.6431 -328.2744 39.7017 -348.4209 40.29 -357.0586 C
38.3438 -356.3975 31.2813 -353.5381 27.8086 -345.9258 c
24.2778 -338.1836 24.4224 -324.9531 22.8906 -323.7354 c
21.7759 -322.8516 9.2002 -335.4893 8.7085 -336.333 c
8.21631 -337.1777 14.6118 -335.1484 15.0605 -336.0098 c
15.5137 -336.8662 12.415 -347.2891 12.6919 -348.1006 c
12.9702 -348.9121 18.3486 -346.1689 18.5771 -347.4229 c
18.8062 -348.6738 19.6465 -355.9463 20.3813 -356.4658 c
21.3809 -357.167 21.1201 -352.1748 22.8906 -353.1289 c
23.5 -353.457 30.2583 -362.0703 42.1875 -362.4014 C
51.8696 -369.3047 105.8286 -364.7598 107.0337 -356.7813 C
107.0537 -356.25 107.0557 -355.71 107.0493 -355.1641 C
107.4556 -349.7988 117.293 -345.707 122.9639 -343.7861 C
122.3745 -345.1982 121.8872 -347.2324 122.3188 -348.3311 c
123.0254 -350.124 126.8706 -350.2471 126.9185 -347.8633 c
126.9453 -346.5117 126.208 -344.8877 125.4482 -343.7354 C
126.8149 -344.3477 128.667 -344.8564 129.7246 -344.5 c
131.5498 -343.8848 131.8672 -340.0508 129.4878 -339.8838 c
128.2715 -339.7979 126.8032 -340.3223 125.6533 -340.9424 C
126.3945 -339.7158 127.0493 -338.1436 126.873 -337.1279 c
126.542 -335.2305 122.8003 -334.3369 122.2744 -336.6621 c
121.9316 -338.1787 122.5063 -340.2451 123.1216 -341.54 C
118.812 -340.6934 111.6094 -340.3252 105.7593 -345.1563 C
105.4907 -343.9648 105.188 -342.7598 104.8486 -341.541 C
105.2339 -336.4219 112.7402 -332.6953 117.5635 -330.8164 C
117.0059 -332.2188 116.5713 -334.1367 116.9863 -335.1934 c
117.6909 -336.9854 121.5366 -337.1084 121.584 -334.7256 c
121.6113 -333.373 120.874 -331.749 120.1138 -330.5957 C
121.4805 -331.209 123.3325 -331.7178 124.3911 -331.3613 c
126.2173 -330.7461 126.5332 -326.9131 124.1548 -326.7451 c
122.9375 -326.6592 121.4697 -327.1855 120.3198 -327.8037 C
121.0615 -326.5771 121.7163 -325.0059 121.5396 -323.9893 c
121.209 -322.0928 117.4673 -321.1982 116.9409 -323.5244 c
116.5664 -325.1777 117.2832 -327.4863 117.9541 -328.7334 C
113.9966 -328.2529 107.4634 -328.3301 101.8247 -332.4668 C
98.7314 -324.3555 94.6523 -316.082 90.6709 -308.5596 C
91.4106 -303.1621 102.625 -299.3477 108.6948 -297.6699 C
108.0601 -299.082 107.4844 -301.2969 107.9424 -302.4629 c
108.647 -304.2549 112.4927 -304.3779 112.5396 -301.9951 c
112.5679 -300.6426 111.8301 -299.0186 111.0698 -297.8652 C
112.4365 -298.4785 114.2886 -298.9873 115.3467 -298.6309 c
117.1729 -298.0156 117.4893 -294.1826 115.1104 -294.0146 c
113.894 -293.9287 112.4263 -294.4551 111.2759 -295.0732 C
112.0176 -293.8467 112.6719 -292.2744 112.4956 -291.2588 c
112.1646 -289.3613 108.4233 -288.4678 107.8965 -290.7939 c
107.4775 -292.6445 108.4268 -295.3213 109.1475 -296.4023 C
104.1362 -296.2168 94.6348 -296.9365 88.2285 -304.0098 C
81.5093 -291.6309 75.749 -282.0439 76.5254 -279.9336 c
78.3257 -275.0322 133.0117 -275.7549 133.0889 -269.7256 c
133.0996 -268.916 131.8813 -268.3311 129.7842 -267.9043 c
129.1992 -267.7842 128.5259 -267.6816 127.811 -267.5859 C
127.7334 -265.6299 126.7383 -262.9736 125.2803 -262.8262 c
124.0435 -262.6982 123.5078 -264.6533 122.8403 -267.1367 C
120.5337 -266.999 117.9546 -266.9102 115.1777 -266.8545 c
113.8184 -266.8271 112.4048 -266.8096 110.9712 -266.7949 C
110.728 -264.9502 109.7998 -262.834 108.5015 -262.7012 c
107.3071 -262.5776 106.7661 -264.4014 106.1289 -266.7637 C
103.7505 -266.7549 101.3452 -266.75 98.9302 -266.7441 c
97.3608 -266.7402 95.8013 -266.7344 94.2529 -266.7246 C
94.0176 -264.8711 93.0859 -262.7236 91.7788 -262.5903 c
90.5786 -262.4648 90.0386 -264.3037 89.3975 -266.6807 C
86.2476 -266.6367 83.2407 -266.5635 80.5161 -266.4346 c
79.5591 -266.3887 78.6411 -266.3359 77.7598 -266.2754 C
77.6475 -264.332 76.666 -261.7827 75.2378 -261.6377 c
74.0273 -261.5112 73.4878 -263.3828 72.8403 -265.7891 C
69.0762 -265.2588 66.8545 -264.4277 67.1284 -263.1191 C
67.1284 -261.9243 70.6216 -260.418 76.0898 -258.7803 c
76.5532 -258.6411 77.0352 -258.5015 77.5259 -258.3604 C
78.2212 -259.9185 79.4238 -261.3843 80.5762 -261.2539 c
81.7109 -261.1274 81.894 -259.4102 82.0132 -257.1436 C
85.5654 -256.2251 89.5459 -255.2861 93.7217 -254.3521 C
94.3545 -256.0967 95.7061 -257.9551 96.998 -257.8086 c
98.1948 -257.6748 98.333 -255.7686 98.4541 -253.314 C
98.6616 -253.2695 98.8633 -253.2246 99.0718 -253.1797 c
102.7231 -252.395 106.438 -251.624 110.0786 -250.8843 C
110.708 -252.6357 112.0654 -254.5103 113.3633 -254.3628 c
114.5513 -254.231 114.6963 -252.353 114.8164 -249.9263 C
115.0908 -249.8706 115.3706 -249.8145 115.6436 -249.7598 c
118.8276 -249.1211 121.8853 -248.5156 124.7109 -247.9541 c
125.2295 -247.8521 125.7388 -247.75 126.2407 -247.6509 C
126.7275 -249.5488 128.2681 -251.9448 129.7285 -251.7793 c
131.0264 -251.6348 131.0801 -249.4053 131.2158 -246.6543 C
137.0161 -245.4805 140.8838 -244.6367 141.2026 -244.3164 C
143.2095 -243.3091 146.4053 -220.8022 142.3481 -217.728 C
f
0 D
57.7573 -258.3916 m
55.9312 -258.813 54.7334 -258.0811 54.3979 -256.625 c
54.062 -255.1699 54.8198 -253.9897 56.646 -253.5757 c
58.4717 -253.1548 59.6689 -253.8779 60.0049 -255.333 c
60.3408 -256.7891 59.5835 -257.9688 57.7573 -258.3916 c
f
66.0259 -255.8936 m
63.9326 -256.375 62.5542 -255.54 62.167 -253.8691 c
61.7793 -252.1982 62.6582 -250.8457 64.751 -250.3633 c
66.8438 -249.8804 68.2222 -250.7168 68.6011 -252.3872 c
68.9888 -254.0586 68.1187 -255.4116 66.0259 -255.8936 c
f
*U
*u
1 D
278.9951 -205.3965 m
276.5107 -204.5039 268.0513 -205.2119 264.9229 -206.9087 C
261.7046 -184.0112 250.9487 -185.0674 247.998 -178.0869 C
246.8711 -174.7661 247.6172 -172.4404 247.1597 -168.2773 C
248.6172 -168.4868 250.7549 -168.7021 252.8379 -168.5693 C
251.0381 -165.0635 L
253.3306 -162.9419 L
250.4155 -160.5044 L
252.626 -157.457 L
252.4878 -157.4502 252.3486 -157.4517 252.21 -157.4497 C
252.2793 -157.4097 252.3511 -157.3726 252.4189 -157.332 C
249.0547 -156.1606 L
250.4424 -153.0127 L
247.4438 -152.5537 L
247.3555 -149.1543 L
244.8066 -150.3594 242.4775 -152.0752 241.5469 -152.7954 C
239.8818 -150.687 237.377 -148.7183 233.978 -147.1426 C
234.1372 -147.1553 L
231.9336 -138.1787 243.1885 -137.208 238.7739 -132.9902 c
236.833 -131.1348 231.9971 -130.8389 231.415 -137.084 c
230.9834 -141.73 231.5332 -144.9106 231.8511 -146.2612 C
229.9756 -145.5571 227.875 -144.9653 225.5435 -144.5151 C
226.0146 -143.3101 226.6694 -141.0845 226.8989 -137.6304 c
227.2681 -132.0581 223.2129 -129.6704 221.3477 -130.1743 c
217.2129 -131.2915 225.873 -137.9341 223.4634 -144.1597 C
214.5815 -142.8438 202.6855 -143.4917 187.4722 -147.5962 c
174.2251 -151.3687 150.5986 -157.1909 156.4043 -179.2324 c
158.4272 -186.9155 162.8438 -189.7329 167.4971 -190.6475 C
167.5298 -191.5669 168.1284 -193.0449 169.1177 -192.9023 c
169.894 -192.7915 170.2524 -191.7866 170.272 -190.9873 C
171.0508 -191.0337 171.8213 -191.0391 172.584 -191.0254 C
172.7656 -191.896 173.3188 -192.8994 174.1421 -192.7808 c
174.9072 -192.6719 175.2666 -191.6948 175.2954 -190.9023 C
175.499 -190.8882 175.707 -190.874 175.9043 -190.8604 c
176.4722 -190.8159 177.0166 -190.772 177.5361 -190.7349 C
177.6426 -191.6528 178.2246 -192.9141 179.1406 -192.7808 c
179.9839 -192.6611 180.3423 -191.4829 180.2993 -190.6636 C
181.8301 -190.7485 182.7573 -191.1899 182.7178 -192.4712 c
182.6436 -194.7754 182.0327 -196.2363 181.1851 -197.2363 C
180.627 -196.729 179.8975 -196.3911 179.3525 -196.7847 c
178.7778 -197.1968 178.8394 -198.103 179.1157 -198.8027 C
178.7676 -198.9785 178.417 -199.1401 178.0737 -199.2847 c
177.4707 -198.6577 176.5859 -198.1206 175.9507 -198.5796 c
175.3882 -198.9824 175.4375 -199.8545 175.6973 -200.5474 C
175.2524 -200.9478 174.9507 -201.459 174.8965 -202.2041 c
174.6128 -206.2183 183.9497 -206.6318 184.9575 -209.3442 c
185.9653 -212.0581 183.1655 -224.2368 187.4722 -231.7739 C
189.1528 -235.4697 191.7437 -237.3345 197.0117 -238.0605 C
196.7554 -244.6299 196.5752 -260.4438 200.7344 -261.0464 c
204.9121 -261.6528 203.4551 -245.1953 202.6831 -238.4282 C
205.2886 -238.46 208.3374 -238.3647 211.9033 -238.1792 C
211.7495 -244.479 211.5747 -265.6187 216.1675 -265.6841 c
221.9067 -265.7681 218.1987 -242.7559 217.3447 -237.8564 C
219.9717 -237.6855 222.8203 -237.4854 225.9395 -237.2607 C
227.6006 -237.2622 229.1899 -237.2178 230.7305 -237.1421 C
230.356 -243.4287 229.9351 -258.0278 234.04 -258.6235 c
238.3589 -259.2495 236.9565 -242.5459 236.3335 -236.6812 C
239.5615 -236.2905 242.4731 -235.7124 245.0986 -234.9785 C
244.9634 -242.4326 245.061 -260.9097 249.3691 -260.9683 c
255.0054 -261.0464 251.2446 -237.353 250.52 -233.0747 C
261.1958 -228.4541 265.4023 -220.6597 265.4893 -213.061 C
273.5767 -217.2915 274.0532 -222.6841 274.7559 -223.0913 c
275.5137 -223.5293 275.4922 -219.7153 274.498 -217.6504 c
273.9966 -216.6074 272.8994 -215.3589 271.5781 -214.1846 C
276.6445 -216.7695 278.1523 -220.2256 278.8149 -220.4048 c
279.7456 -220.6553 279.6548 -217.7056 277.7871 -215.6382 c
276.6216 -214.3467 273.0352 -212.1162 269.7134 -210.6621 C
277.8398 -210.8276 281.1494 -214.8784 281.9644 -214.856 c
282.9272 -214.8257 282.2915 -212.394 279.6035 -210.5879 c
278.0952 -209.5742 273.7041 -208.4424 269.9785 -208.0776 C
277.543 -206.2158 281.6855 -209.0854 282.4473 -208.8418 c
283.3638 -208.5464 282.2915 -206.5801 278.9951 -205.3965 c
f
0 D
196.082 -158.5352 m
194.8076 -158.4839 194.1787 -156.9849 194.2651 -154.7197 c
194.3511 -152.4629 195.0918 -151.0166 196.3667 -151.0679 c
197.6416 -151.1108 198.2617 -152.6094 198.1753 -154.875 c
198.0894 -157.1318 197.3569 -158.5791 196.082 -158.5352 c
f
203.7915 -159.0776 m
202.3267 -159.0269 201.6128 -157.3037 201.7065 -154.7114 c
201.8105 -152.1187 202.6548 -150.4561 204.1187 -150.5166 c
205.5742 -150.5684 206.2979 -152.2905 206.2026 -154.8838 c
206.1001 -157.4761 205.2559 -159.1387 203.7915 -159.0776 c
f
*U
*u
1 D
574.3076 -204.2144 m
562.5088 -202.6509 555.4873 -210.478 553.1123 -213.2935 c
551.6533 -215.0073 516.7881 -230.2622 513.3604 -230.9819 C
491.6748 -228.1226 464.1162 -234.0659 454.6582 -244.0405 c
452.9102 -245.8853 451.6143 -248.2358 450.6934 -250.9438 C
445.9258 -261.3315 430.7568 -298.0078 433.6377 -333.2441 c
436.5176 -368.4844 446.0234 -381.8789 453.0342 -377.2227 C
457.2588 -373.3809 447.8008 -364.6914 444.3926 -351.6816 c
440.9834 -338.6699 445.3223 -296.1289 449.7695 -296.1816 c
454.2148 -296.2324 454.9961 -298.5996 Y
456.8223 -303.9063 458.6191 -307.582 459.7021 -308.2793 c
460.332 -308.6855 462.7383 -308.959 466.3691 -309.1113 C
469.8643 -312.6348 466.709 -373.0117 469.165 -374.5273 c
471.6621 -376.0723 478.1924 -375.4941 479.9199 -374.5273 c
481.6094 -373.5859 472.1641 -314.4492 475.0869 -309.2637 C
477.9678 -309.2637 481.1367 -309.2246 484.4912 -309.1543 C
487.8877 -313.8457 485.9209 -372.0684 488.3486 -373.5703 c
490.8447 -375.1133 497.375 -374.5332 499.1025 -373.5703 c
500.791 -372.627 491.2158 -314.084 494.1162 -308.8672 C
500.5693 -308.627 507.3193 -308.2813 513.8066 -307.8418 C
513.7334 -307.8477 L
517.4785 -309.4531 515.6377 -370.8848 518.1357 -372.4199 c
520.6318 -373.957 527.1621 -373.3809 528.8896 -372.4199 c
530.6182 -371.4609 521.3809 -309.6172 525.0293 -306.9551 C
524.9756 -306.959 L
527.3887 -306.7363 529.7002 -306.502 531.876 -306.252 C
535.5947 -307.8633 533.04 -369.5391 535.5361 -371.0762 c
538.0322 -372.6133 544.5615 -372.0371 546.29 -371.0762 c
548.6025 -369.791 541.5303 -306.9453 545.5459 -304.0137 C
547.6592 -303.4551 549.0342 -302.8574 549.4385 -302.2305 c
553.0879 -296.5645 553.4717 -259.5005 537.6279 -241.4487 c
537.2188 -240.9819 536.7783 -240.5356 536.3193 -240.1001 C
540.668 -231.9106 557.8232 -224.0552 558.5283 -224.6069 c
559.2393 -225.1792 562.4287 -228.729 569.7471 -230.187 c
572.0967 -230.6665 583.0205 -229.8354 580.4307 -223.8794 C
578.2061 -222.7388 576.3701 -224.1206 575.4893 -223.8179 c
574.583 -223.521 573.79 -221.6138 572.4287 -221.5298 c
571.2803 -221.4575 569.7451 -222.9634 567.9404 -221.6528 C
563.4482 -219.2202 565.6475 -217.1284 566.9678 -216.1323 C
567.1963 -215.7876 570.3701 -215.2563 571.5205 -215.7944 c
572.1982 -216.1118 572.8877 -217.3521 574.3174 -217.3638 c
575.1494 -217.3706 575.3506 -216.7915 576.3467 -217.1665 C
576.8018 -217.2749 577.9268 -218.7729 578.8955 -218.9546 c
579.6104 -219.0864 584.1709 -218.8257 584.8311 -216.5337 C
584.9248 -214.0015 583.2119 -205.396 574.3076 -204.2144 c
f
0 D
564.3076 -210.7075 m
563.8057 -208.1216 568.7002 -207.1626 569.2021 -209.7476 c
569.7119 -212.3315 564.8193 -213.2983 564.3076 -210.7075 c
f
573.3955 -211.4575 m
572.4346 -211.6431 571.7432 -211.3345 571.5967 -210.5659 c
571.4424 -209.8003 571.7432 -209.0942 572.7021 -208.9009 c
573.6689 -208.7114 574.5674 -209.189 574.7217 -209.9536 c
574.8682 -210.7212 574.3623 -211.2681 573.3955 -211.4575 c
f
*U
u
*u
1 D
303.9961 -396.9883 m
294.8071 -381.9404 269.4927 -404.3467 265.3706 -392.9199 c
262.728 -385.5781 268.7563 -326.1963 Y
274.0552 -281.749 244.1128 -281.8965 v
214.1782 -282.043 217.3911 -324.7246 Y
213.9253 -377.0645 216.0679 -394.3389 v
216.854 -400.6826 220.2036 -409.5303 229.2739 -416.2383 c
229.5581 -419.9541 230.7485 -423.917 228.7192 -426.5781 c
228.144 -427.3291 226.9731 -427.2295 226.0933 -427.3281 c
225.0571 -427.4395 224.1987 -428.2686 224.2681 -429.7402 c
224.3286 -431.2168 225.3091 -431.7471 226.4019 -431.5117 c
227.3247 -431.3213 228.4185 -430.8125 229.1851 -431.416 c
229.8198 -431.917 230.1821 -433.0928 230.3345 -433.9453 c
230.6128 -435.5479 231.2739 -436.5098 232.6421 -436.0684 c
234.0112 -435.6289 234.2983 -434.166 233.9517 -432.7617 c
233.7681 -431.999 233.5337 -431.0957 233.9282 -430.4365 c
234.2974 -429.8174 235.229 -429.7617 235.8882 -429.626 c
236.9868 -429.3887 237.6509 -428.7344 237.4116 -427.6416 c
237.1665 -426.5518 236.5786 -426.167 235.5415 -426.2734 c
234.9136 -426.3447 233.7407 -426.502 233.2466 -426.0654 c
231.2905 -424.3477 231.7729 -421.1973 232.397 -418.083 C
232.4702 -418.1152 232.5415 -418.1523 232.6147 -418.1836 c
234.2925 -418.9111 236.103 -419.3398 238.0552 -419.3584 c
244.5161 -419.4219 249.144 -417.9434 252.5728 -416.2344 c
252.7085 -416.166 252.8364 -416.0967 252.9683 -416.0283 C
254.3062 -419.2627 255.9243 -422.7578 254.2515 -425.0596 c
253.8813 -425.5703 252.77 -425.6396 252.1763 -425.6904 c
251.2007 -425.7832 250.7339 -426.2617 250.7222 -427.3555 c
250.7163 -428.4482 251.4565 -428.9502 252.5161 -428.9727 c
253.1479 -428.9766 254.019 -428.8555 254.481 -429.3799 c
254.9731 -429.9375 254.9331 -430.8486 254.9155 -431.6133 c
254.8706 -433.0264 255.4214 -434.377 256.769 -434.541 c
258.1187 -434.7061 258.5376 -433.6602 258.48 -432.0693 c
258.4526 -431.2227 258.5571 -430.0264 259.0435 -429.4258 c
259.6294 -428.7031 260.7368 -428.9844 261.6284 -428.9941 c
262.6812 -429.0127 263.48 -428.3213 263.2476 -426.8945 c
263.022 -425.4678 262.0688 -424.834 261.0903 -424.9219 c
260.2612 -424.9932 259.2017 -425.3105 258.5239 -424.6973 c
256.1099 -422.5059 256.7163 -417.8213 256.2593 -414.0879 C
258.647 -412.5098 260.2056 -411.2051 261.4399 -411.2637 c
262.8472 -411.3291 271.3481 -420.2119 282.7388 -420.3887 c
296.4194 -420.6006 312.6328 -411.1221 303.9961 -396.9883 c
f
0 D
230.5425 -295.7842 m
232.8345 -295.7842 235.4604 -298.0801 235.4604 -298.8623 c
235.4604 -299.6455 233.2046 -301.6299 230.9204 -301.6299 c
228.6304 -301.6299 226.3755 -299.6455 226.3755 -298.8623 c
226.3755 -298.0801 228.2593 -295.7842 230.5425 -295.7842 c
f
235.1948 -387.416 m
236.1011 -388.4805 236.519 -389.9004 235.6069 -390.9482 c
234.6938 -391.9902 233.729 -391.4648 232.7925 -390.1934 c
232.2856 -389.5234 231.4683 -388.6641 230.731 -388.5352 c
229.8433 -388.3691 229.1772 -389.3408 228.5181 -389.9521 c
227.7358 -390.6895 226.7056 -390.6943 225.9995 -389.4287 c
225.2866 -388.1758 225.6108 -387.0332 226.4048 -386.4385 c
227.0708 -385.9258 228.1538 -385.4609 228.2017 -384.5137 c
228.5776 -376.9004 219.895 -377.3369 225.8511 -365.3447 C
227.7944 -362.5488 231.52 -367.1865 229.8081 -368.583 C
225.3687 -370.6426 228.5532 -381.1465 231.645 -381.8877 c
232.2388 -382.0352 233.1157 -381.3281 233.6001 -380.9629 c
234.3892 -380.3691 235.0356 -380.4277 235.7251 -381.2627 c
236.4009 -382.1055 236.1538 -383 235.3716 -383.7363 c
234.895 -384.1729 234.1655 -384.6719 234.1401 -385.3906 c
234.1167 -386.1553 234.7065 -386.8389 235.1948 -387.416 c
f
231.4438 -330.8291 m
234.6284 -293.4648 258.5962 -297.5146 252.272 -332.0059 c
249.8472 -345.2529 230.3501 -343.7051 231.4438 -330.8291 c
f
253.3843 -384.5137 m
253.4321 -385.4609 254.5044 -385.9258 255.1636 -386.4385 c
255.9468 -387.0332 256.271 -388.1758 255.5698 -389.4287 c
254.8706 -390.6943 253.8452 -390.6895 253.0728 -389.9521 c
252.4136 -389.3408 251.7554 -388.3691 250.8774 -388.5352 c
250.1411 -388.6641 249.3354 -389.5234 248.8345 -390.1934 c
247.9058 -391.4648 246.9507 -391.9902 246.0444 -390.9482 c
245.1372 -389.9004 245.5562 -388.4805 246.4507 -387.416 c
246.9331 -386.8389 247.521 -386.1553 247.4985 -385.3906 c
247.4741 -384.6719 246.7515 -384.1729 246.2808 -383.7363 c
245.5024 -383 245.2554 -382.1055 245.9331 -381.2627 c
246.6099 -380.4277 247.2515 -380.3691 248.0405 -380.9629 c
248.5103 -381.3281 249.3823 -382.0352 249.9702 -381.8877 c
253.0317 -381.1465 256.188 -370.6426 251.7896 -368.583 C
250.0942 -367.1865 253.7856 -362.5488 255.7056 -365.3447 C
261.6167 -377.3369 253.0083 -376.9004 253.3843 -384.5137 c
f
257.9536 -303.543 m
255.6636 -303.543 253.4087 -301.5586 253.4087 -300.7764 c
253.4087 -299.9932 255.6636 -297.6318 257.9536 -297.6318 c
260.2388 -297.6318 262.4927 -299.9932 262.4927 -300.7764 c
262.4927 -301.5586 260.2388 -303.543 257.9536 -303.543 c
f
*U
257.9536 -299.2031 m
257.1235 -299.2031 256.6831 -299.752 256.6831 -300.5879 c
256.6831 -301.4229 257.1235 -301.9648 257.9536 -301.9648 c
258.7788 -301.9648 259.2202 -301.4229 259.2202 -300.5879 c
259.2202 -299.752 258.7788 -299.2031 257.9536 -299.2031 c
f
243.2827 -333.4736 m
243.0122 -336.6455 246.5864 -337.1289 246.8687 -333.7773 c
247.1567 -330.4287 243.5542 -330.2998 243.2827 -333.4736 c
f
236.1655 -332.8652 m
235.8774 -336.2217 239.48 -336.3457 239.7515 -333.1719 c
240.0229 -330 236.4478 -329.5166 236.1655 -332.8652 c
f
230.9204 -300.0869 m
231.7437 -300.0869 232.186 -299.54 232.186 -298.7041 c
232.186 -297.8672 231.7437 -297.3262 230.9204 -297.3262 c
230.0913 -297.3262 229.6499 -297.8672 229.6499 -298.7041 c
229.6499 -299.54 230.0913 -300.0869 230.9204 -300.0869 c
f
U
*u
1 D
386.4775 -38.7109 m
386.3154 -37.3438 393.7949 -34.7715 393.6357 -33.1582 c
393.4785 -31.543 383.9375 -35.4551 383.124 -33.3359 C
382.3369 -29.6104 381.3799 -27.4248 380.5869 -27.3506 c
377.4258 -27.0664 371.9736 -93.6738 334.0752 -91.9512 C
326.5469 -91.2012 320.0781 -64.1035 324.3076 -56.6367 c
328.5449 -49.1768 340.1045 -48.668 339.5273 -45.5156 c
338.9502 -42.3555 320.5693 -48.1865 319.8623 -44.7236 c
318.709 -39.125 346.6328 -31.373 344.8418 -25.9209 c
343.541 -21.9849 310.0957 -29.7188 306.6494 -38.4102 c
303.2051 -47.0918 309.8105 -65.25 310.2422 -68.2734 c
310.6729 -71.2881 312.8604 -92.8809 305.7363 -95.4219 C
269.3799 -106.249 248.002 -42.9238 245.0049 -43.9658 c
244.249 -44.2285 243.8486 -46.5977 243.9893 -50.4336 C
241.959 -51.8291 234.0527 -51.1992 234.2324 -52.623 c
234.4355 -54.2305 242.1797 -55.1279 242.3252 -56.4961 c
242.4678 -57.8613 235.4063 -64.4434 236.0967 -65.6777 c
236.7715 -66.8867 242.7783 -60.793 245.4033 -61.7695 C
247.8105 -74.3027 253.5088 -91.5078 264.5059 -106.8691 c
274.4238 -120.7285 287.7725 -126.6201 298.9102 -129.1934 C
299.3711 -131.959 296.4229 -140.1621 297.6367 -140.4531 c
299.0166 -140.7832 302.0273 -131.9951 303.1934 -132.3096 c
304.3564 -132.625 307.6875 -143.2578 308.9033 -142.8848 c
310.0654 -142.5273 306.9971 -133.7207 308.3125 -130.751 C
314.8555 -131.4434 319.4434 -131.1885 320.0693 -131.6152 c
321.8525 -132.8389 324.3506 -169.7207 330.2676 -169.4707 C
332.2051 -169.1855 327.4678 -132.1484 328.9063 -130.5381 c
329.4004 -129.9805 333.7422 -129.1465 339.7402 -126.9902 C
341.4873 -129.7656 340.3027 -138.7803 341.4668 -138.917 c
342.6992 -139.0605 343.8184 -128.0176 344.8662 -127.4941 c
345.917 -126.9707 350.4854 -135.04 351.7373 -134.4609 c
352.8838 -133.9297 348.0576 -125.7969 348.3574 -123.3203 C
358.6641 -118.1758 370.4688 -109.207 376.8486 -93.1055 c
383.835 -75.4844 385.1982 -57.3477 384.4912 -44.5938 C
386.7578 -42.8516 394.3008 -47.6523 394.7061 -46.3047 c
395.1152 -44.9482 386.6406 -40.0762 386.4775 -38.7109 c
f
0 D
325.8232 -33.5957 m
326.4521 -35.6621 322.1113 -37.6094 321.5078 -35.2246 c
320.9131 -32.8379 324.9189 -30.5898 325.8232 -33.5957 c
f
314.6436 -40.5898 m
311.9219 -37.6172 316.9863 -34.5518 319.2246 -36.7744 c
321.4561 -39.0049 316.5117 -42.6309 314.6436 -40.5898 c
f
*U
*u
1 D
205.645 -291.6514 m
206.083 -285.7783 157.4307 -280.5371 153.9912 -287.7949 c
150.5513 -295.0537 159.0142 -357.2285 150.3589 -368.0195 c
137.6978 -383.8145 62.0278 -391.9092 59.8003 -392.1689 c
57.5713 -392.4268 42.6362 -385.8955 41.5278 -388.2275 C
39.7573 -393.2471 51.2324 -402.3994 51.1143 -403.541 c
51.0029 -404.6865 44.7603 -403.8457 44.7837 -405.001 c
44.8003 -406.1543 56.9653 -411.8418 57.0513 -413.2129 c
57.1353 -414.583 54.3179 -415.9844 54.8262 -417.123 c
54.9971 -417.5098 68.4756 -420.79 69.4175 -420.9219 C
70.2417 -421.3447 79.208 -425.1787 91.9756 -428.3223 C
92.9893 -429.7393 93.4346 -438.1025 91.8096 -438.8848 c
90.1777 -439.6699 83.228 -442.7871 83.9097 -444.4355 c
84.5918 -446.0859 89.8472 -443.6182 90.875 -443.8613 c
91.9038 -444.1064 89.2686 -450.3047 90.9351 -450.5957 c
92.6045 -450.8887 94.4805 -446.2344 95.4673 -445.9717 c
96.4526 -445.707 101.0488 -449.9219 101.7759 -448.7979 c
102.5034 -447.6758 97.1479 -440.7119 96.7295 -439.8398 c
96.3115 -438.9678 97.0542 -431.5479 99.311 -429.9512 C
99.2422 -429.9355 L
104.5928 -430.9902 110.3828 -431.835 116.3745 -432.2402 C
121.5264 -432.3857 126.1436 -432.0996 130.2969 -431.4707 C
131.8379 -433.5986 132.7148 -438.0771 132.416 -438.7012 c
132.061 -439.4404 127.3867 -445.4316 128.082 -446.3262 c
128.7783 -447.2227 132.8408 -443.5313 133.7466 -443.7031 c
134.6523 -443.875 136.498 -447.6309 138.0107 -447.3115 c
139.5205 -446.9961 136.9365 -442.001 137.8667 -441.752 c
138.7969 -441.502 143.6567 -443.2959 144.2305 -441.9023 c
144.8022 -440.5117 138.3813 -438.2559 136.8696 -437.6855 c
135.6758 -437.2305 135.5327 -432.7578 135.9673 -430.333 C
167.2729 -422.3789 166.8008 -392.5479 166.6743 -389.6299 c
166.5156 -386.0488 164.8286 -380.5293 160.6362 -374.1494 c
156.4434 -367.7764 164.7275 -308.5596 172.1235 -306.5352 C
175.834 -305.7383 183.2969 -303.5049 183.6362 -301.8115 c
183.981 -300.125 169.0034 -298.04 169.4463 -294.9551 c
169.8882 -291.8799 205.2065 -297.5225 205.645 -291.6514 c
f
0 D
172.7539 -288.0752 m
173.5864 -285.9941 177.6563 -286.4971 176.7207 -289.2012 c
176.0732 -291.0605 171.9224 -290.1641 172.7539 -288.0752 c
f
130.0039 -411.4141 m
118.4868 -417.3867 103.0186 -419.2188 101.4478 -416.5273 C
99.269 -411.2119 107.0513 -408.3291 106.4209 -407.4512 c
105.7847 -406.5732 100.4854 -410.0166 97.293 -407.8457 c
94.0996 -405.6748 99.4922 -404.9502 98.9438 -404.1045 c
98.3877 -403.2578 78.8433 -406.6279 80.6113 -399.5166 C
82.4653 -395.4688 135.6079 -384.4717 145.5571 -392.833 C
149.0752 -395.3154 141.5181 -405.4434 130.0039 -411.4141 c
f
159.0122 -291.1895 m
158.6211 -287.5342 163.8926 -288 164.3237 -290.8457 c
164.7495 -293.6914 159.2744 -293.7031 159.0122 -291.1895 c
f
*U
*u
1 D
127.8882 -535.6494 m
126.9448 -535.0459 125.5298 -534.8271 124.3325 -534.8213 C
125.4673 -534.1572 126.6851 -533.1748 126.9878 -532.2783 c
127.5532 -530.6045 124.9292 -528.2412 123.4839 -529.8877 c
122.3335 -531.1963 121.9243 -533.7705 122.0327 -534.96 C
118.9272 -533.1182 113.354 -530.5166 107.1069 -530.8721 C
107.1519 -525.1006 107.0356 -517.4854 106.8862 -510.626 C
110.564 -508.165 116.0649 -506.3721 119.6333 -505.3857 C
119.0513 -506.6846 118.5229 -508.7178 118.9438 -509.7861 c
119.5903 -511.4326 123.1216 -511.5459 123.1646 -509.3584 c
123.1899 -508.1162 122.5122 -506.626 121.814 -505.5654 C
123.0698 -506.1299 124.77 -506.5967 125.7417 -506.2686 c
127.4175 -505.7041 127.7085 -502.1846 125.5249 -502.0303 c
124.4077 -501.9521 123.0601 -502.4346 122.0034 -503.0029 C
122.6851 -501.8779 123.2856 -500.4346 123.1226 -499.501 c
122.8198 -497.7588 119.3853 -496.9385 118.9019 -499.0752 c
118.5161 -500.7744 119.3872 -503.2314 120.0503 -504.2236 C
116.8462 -504.1045 111.645 -504.3916 106.7974 -506.7666 C
106.729 -503.9443 L
106.5698 -497.8545 106.4263 -493.46 Y
105.3247 -493.96 103.6323 -494.5811 V
102.7847 -493.3799 102.1021 -492.4639 101.4517 -492.7822 c
100.7661 -493.1143 100.6616 -494.4287 100.8765 -495.5049 C
99.0298 -496.0654 96.9253 -496.5791 94.8833 -496.8076 C
94.4263 -495.5127 94.0239 -494.5459 93.3442 -494.667 c
92.644 -494.792 92.1968 -495.876 92.0679 -496.9111 C
88.6147 -496.7334 85.8784 -495.2354 85.7925 -490.9717 c
85.689 -485.8643 88.6704 -483.3975 92.2173 -482.3154 C
92.5923 -483.3838 93.4224 -484.5439 94.2153 -484.4541 c
94.9399 -484.374 95.0229 -483.2197 95.0952 -481.7334 C
97.187 -481.4854 99.3286 -481.5635 101.1831 -481.7607 C
101.2319 -482.9053 101.7183 -484.3057 102.5249 -484.4404 c
103.2241 -484.5576 103.6177 -483.5303 104.0776 -482.1787 C
105.5142 -482.4404 106.4263 -482.6904 Y
106.9058 -473.1982 101.481 -468.251 v
101.2661 -468.0518 101.0083 -467.8604 100.7212 -467.6729 C
100.9175 -467.3711 99.3042 -455.4492 98.5288 -455.4092 c
97.7603 -455.3682 93.4976 -464.334 93.5835 -465.1357 C
85.27 -463.3564 72.7886 -463.0811 63.937 -465.6953 C
61.2534 -464.1455 51.5913 -459.4443 50.9839 -459.7158 c
50.3452 -460.0029 54.0737 -468.9766 55.1538 -471.0889 C
48.7427 -479.1689 45.7202 -493.0771 44.5483 -506.21 C
44.5269 -506.9346 L
39.5835 -504.4033 34.2144 -504.1025 30.9351 -504.2236 C
31.5981 -503.2314 32.4692 -500.7744 32.0835 -499.0752 c
31.6011 -496.9385 28.1655 -497.7607 27.8628 -499.501 c
27.7007 -500.4346 28.3013 -501.8779 28.9819 -503.0029 C
27.9263 -502.4346 26.5786 -501.9521 25.4614 -502.0303 c
23.2778 -502.1846 23.5679 -505.7041 25.2446 -506.2686 c
26.2163 -506.5967 27.9155 -506.1299 29.1714 -505.5654 C
28.4722 -506.626 27.7964 -508.1162 27.8218 -509.3584 c
27.8647 -511.5459 31.395 -511.4326 32.0425 -509.7861 c
32.4624 -508.7178 31.9351 -506.6846 31.3521 -505.3857 C
34.9585 -506.3838 40.5396 -508.2021 44.2163 -510.7041 C
43.7515 -518.4951 43.8979 -525.7119 44.3159 -530.9033 C
37.8931 -530.3975 32.1304 -533.0752 28.9546 -534.96 C
29.061 -533.7705 28.6519 -531.1963 27.5024 -529.8877 c
26.0571 -528.2412 23.4321 -530.6045 23.9976 -532.2783 c
24.3003 -533.1768 25.5181 -534.1572 26.6538 -534.8213 C
25.4556 -534.8271 24.0405 -535.0459 23.0972 -535.6494 c
21.2524 -536.8281 23.189 -539.7813 24.9321 -539.4766 c
25.9409 -539.2988 27.2124 -538.0762 28.0464 -536.9824 C
27.939 -538.2461 28.0562 -539.8809 28.6714 -540.959 c
29.7544 -542.8594 32.8022 -541.0723 32.5845 -539.3184 c
32.4429 -538.1777 31.0063 -536.6445 29.8745 -535.7822 C
33.812 -534.8662 40.2329 -533.6943 44.7554 -534.4463 C
45.2476 -537.6074 L
45.3765 -538.0957 45.5073 -538.4668 45.6401 -538.6914 c
46.896 -540.7305 56.4038 -541.7891 67.5493 -542.1563 C
67.0972 -542.9648 66.6743 -543.8047 66.2925 -544.6895 c
65.5933 -546.334 65.021 -548.1191 64.7378 -550.0547 c
64.5952 -551.0195 64.5249 -552.0176 64.5444 -553.0371 c
64.5542 -553.5449 64.5854 -554.0566 64.6411 -554.5703 C
64.687 -554.9551 L
64.7456 -555.3398 L
64.7866 -555.6191 L
64.8716 -556.0508 L
64.9292 -556.3516 64.9897 -556.5957 65.0513 -556.8457 c
65.1089 -557.0977 65.188 -557.3477 65.2583 -557.5977 c
65.4087 -558.0977 65.5825 -558.5918 65.7788 -559.0762 c
66.1733 -560.043 66.6548 -560.9746 67.2036 -561.8359 c
68.3081 -563.5605 69.6372 -564.998 70.9731 -566.209 c
73.6685 -568.6074 76.3911 -570.2461 78.5757 -571.8066 c
79.6675 -572.5781 80.5991 -573.334 81.2671 -574.0117 c
81.938 -574.6973 82.271 -575.2539 82.4302 -575.7285 c
82.5083 -575.9746 82.5757 -576.2461 82.5815 -576.3711 c
82.5864 -576.5098 82.6138 -576.5566 82.6079 -576.6367 C
82.6167 -576.7188 82.5942 -576.8555 82.478 -577.0781 c
82.3687 -577.3008 82.1558 -577.582 81.8638 -577.8945 c
81.2749 -578.5215 80.3667 -579.2031 79.3462 -579.8574 c
78.8345 -580.1895 78.2876 -580.5117 77.7261 -580.8359 C
76.8745 -581.3184 L
76.4507 -581.5645 L
76.3228 -581.6387 76.1431 -581.7266 76.0874 -581.793 C
74.8481 -583.2754 L
74.4116 -583.7969 74.1411 -584.4668 74.1226 -585.1992 c
74.0786 -586.9277 75.4429 -588.3613 77.1685 -588.4063 C
77.897 -588.4238 L
78.5571 -588.4258 L
78.9907 -588.4141 79.4233 -588.3906 79.856 -588.3496 c
80.7183 -588.2695 81.5806 -588.1289 82.4517 -587.9277 c
84.189 -587.5156 85.9634 -586.8711 87.7495 -585.7168 c
88.6411 -585.1406 89.5269 -584.4141 90.354 -583.4863 c
91.1743 -582.5605 91.9165 -581.4043 92.4146 -580.0859 c
92.9048 -578.7695 93.1421 -577.3262 93.0903 -575.9824 c
93.0435 -574.625 92.7974 -573.4336 92.396 -572.2793 c
91.9946 -571.125 91.4331 -570.0371 90.7954 -569.0977 c
90.1597 -568.1465 89.4526 -567.334 88.7437 -566.6152 c
87.3208 -565.1875 85.8765 -564.1543 84.5386 -563.2344 c
83.1948 -562.3184 81.9292 -561.5273 80.7661 -560.7715 c
79.6011 -560.0156 78.5542 -559.2793 77.6616 -558.541 c
75.856 -557.0625 74.8208 -555.627 74.3521 -553.9902 C
74.3149 -553.8789 L
74.2573 -553.6113 L
74.228 -553.4746 L
74.2144 -553.4082 L
74.2163 -553.4277 74.1919 -553.2832 74.2231 -553.4688 C
74.2192 -553.4492 74.1851 -553.2832 Y
74.1411 -553.0625 74.1069 -552.8379 74.0835 -552.6055 c
74.0347 -552.1445 74.0269 -551.6582 74.0591 -551.1523 c
74.1226 -550.1406 74.3364 -549.0469 74.7017 -547.9277 c
75.3003 -546.0703 76.2446 -544.1699 77.395 -542.3047 C
91.8784 -542.291 105.9595 -541.3145 106.5894 -539.9355 c
106.7378 -539.6094 106.8501 -538.7246 106.9302 -537.4238 C
106.9097 -537.4668 106.8853 -537.5078 106.8667 -537.5527 C
106.8052 -534.3604 L
111.2827 -533.792 117.3364 -534.9053 121.1099 -535.7822 C
119.98 -536.6445 118.5435 -538.1777 118.4019 -539.3184 c
118.1831 -541.0723 121.2319 -542.8594 122.3149 -540.957 c
122.9302 -539.8809 123.0474 -538.2461 122.9409 -536.9824 C
123.7729 -538.0762 125.0444 -539.2988 126.0542 -539.4766 c
127.7974 -539.7813 129.7339 -536.8281 127.8882 -535.6494 c
f
0 D
73.2563 -472.2842 m
74.0854 -475.8076 68.897 -476.7686 68.2749 -473.6436 c
67.3696 -469.0967 72.4243 -468.7666 73.2563 -472.2842 c
f
80.4458 -472.7646 m
81.4507 -467.1113 89.5981 -466.9443 88.564 -474.2236 c
87.855 -479.2295 79.4409 -478.4111 80.4458 -472.7646 c
f
*U
*u
1 D
380.0264 -256.4185 m
380.7119 -256.0962 381.4521 -255.7563 382.2373 -255.4028 c
383.7871 -254.7051 385.4951 -253.957 387.2432 -253.1924 c
388.0781 -252.8271 388.918 -252.459 389.7549 -252.0918 c
391.2852 -251.4175 392.793 -250.7471 394.1973 -250.1021 c
395.082 -249.6953 395.9268 -249.3003 396.7051 -248.9204 c
399.7754 -247.4263 401.8604 -246.1885 401.6338 -245.5879 c
401.1328 -244.1167 370.2539 -247.2534 368.4756 -245.3799 C
367.9736 -244.585 367.5156 -243.9961 367.1113 -243.6528 C
357.4648 -231.6021 319.959 -225.7617 316.3662 -253.7603 C
315.7822 -256.4463 315.7549 -260.9854 316.1074 -266.2944 c
316.25 -268.4409 316.4619 -270.7202 316.7158 -273.0464 C
309.623 -266.5415 301.1279 -262.0791 298.0698 -269.4712 c
292.1816 -283.7114 304.2939 -275.9209 305.124 -273.4414 C
301.1963 -285.7349 309.8057 -277.3232 V
309.127 -283.4258 314.5918 -278.333 V
315.9609 -280.1216 317.8613 -281.7407 V
318.5264 -286.0532 319.3125 -290.2544 320.1494 -293.9043 C
315.6143 -292.4097 310.833 -294.0352 307.7344 -295.5737 C
307.9609 -294.1494 308.0039 -292.2188 307.5557 -290.9072 c
306.7871 -288.6563 304.8076 -289.833 304.7227 -291.7534 c
304.6689 -293.0161 305.4551 -295.1543 306.1631 -296.4189 C
304.9463 -295.9648 303.0293 -295.6045 301.6006 -295.8848 c
299.3921 -296.3164 299.729 -298.7407 301.5127 -299.1489 c
302.6855 -299.4141 304.8564 -298.7534 306.1855 -298.0879 C
305.6631 -299.2539 305.1973 -301.0928 305.4033 -302.5869 c
305.7305 -304.9473 308.0342 -304.5176 308.4824 -302.6572 c
308.7754 -301.4463 308.3223 -299.3564 307.8057 -298.0649 C
312.5684 -298.8403 320.8457 -300.6729 323.4561 -304.2744 C
323.7334 -304.7725 324.0078 -305.1543 324.2754 -305.4004 c
328.5039 -309.293 384.4766 -301.042 385.6787 -297.6099 c
385.7363 -297.4487 385.7588 -297.1895 385.7471 -296.8452 C
385.8232 -297.1899 L
386.8975 -293.0601 393.1006 -289.6948 397.1162 -287.9092 C
396.9141 -289.291 396.9639 -291.3623 397.5479 -292.4453 c
398.4609 -294.1416 400.9385 -294.0015 400.7031 -291.6294 c
400.5537 -290.1265 399.627 -288.4561 398.8066 -287.4497 C
400.3359 -287.7725 402.7354 -287.8877 403.8789 -287.3462 c
405.6162 -286.5181 405.377 -284.082 402.9951 -284.1987 c
401.4521 -284.2734 399.5557 -285.0933 398.4209 -285.8335 C
398.8447 -284.4336 399.1396 -282.1597 398.7764 -280.9443 c
398.2207 -279.0996 395.8984 -278.4385 395.6504 -280.8115 c
395.4951 -282.2983 396.1035 -284.3486 396.7324 -285.6821 C
393.2803 -285.1802 388.1172 -285.0581 383.8164 -287.5518 C
383.3672 -285.8677 382.8477 -284.0283 382.2842 -282.1055 C
383.4756 -280.3218 384.1943 -278.688 Y
390.7061 -282.3496 388.6084 -276.5791 Y
398.958 -282.7246 392.2432 -271.7031 Y
393.6357 -273.9165 407.2412 -278.6338 398.1602 -266.1836 c
393.2344 -259.4258 385.5801 -266.6646 380.1611 -275.1577 C
379.4707 -272.9834 378.7471 -270.771 378.0029 -268.5732 C
378.8936 -265.1123 382.9023 -264.8652 383.1328 -264.0781 c
383.3633 -263.2925 376.1123 -260.6885 375.7031 -259.0708 c
375.5957 -258.6494 377.3701 -257.6689 380.0264 -256.4185 c
f
/BBAccumRotation (0.118959) XT
0 D
333.3174 -249.7734 m
330.8936 -241.2417 343.1895 -239.7642 345.3828 -246.3452 c
347.5732 -252.9268 334.9814 -255.6382 333.3174 -249.7734 c
f
/BBAccumRotation (0.118959) XT
359.1855 -247.0195 m
358.7822 -250.6772 350.0352 -250.2129 350.7031 -246.0806 c
351.3721 -241.9507 359.7637 -241.6943 359.1855 -247.0195 c
f
/BBAccumRotation (0.118959) XT
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
